/*
 * Copyright (c) 2018-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

'use strict';

var FusionAuthClient = function(apiKey, host) {
  this.apiKey = apiKey;
  this.host = host;
};

FusionAuthClient.constructor = FusionAuthClient;
//noinspection JSUnusedGlobalSymbols
FusionAuthClient.prototype = {

  /**
   * Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
   * "actioner". Both user ids are required. You pass the actionee's user id into the method and the actioner's is put into the
   * request object.
   *
   * @param {string} actioneeUserId The actionee's user id.
   * @param {ActionRequest} request The action request that includes all of the information about the action being taken including
   *    the id of the action, any options and the duration (if applicable).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  actionUser: function(actioneeUserId, request, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlSegment(actioneeUserId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Adds a user to an existing family. The family id must be specified.
   *
   * @param {string} familyId The id of the family.
   * @param {FamilyRequest} request The request object that contains all of the information used to determine which user to add to the family.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  addUserToFamily: function(familyId, request, callBack) {
      return this._start()
          .uri('/api/user/family')
          .urlSegment(familyId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Cancels the user action.
   *
   * @param {string} actionId The action id of the action to cancel.
   * @param {ActionRequest} request The action request that contains the information about the cancellation.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  cancelAction: function(actionId, request, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlSegment(actionId)
          .setJSONBody(request)
          .delete()
          .go(callBack);
  },

  /**
   * Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
   * and they clicked on a link to reset their password.
   *
   * @param {string} changePasswordId The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.
   * @param {ChangePasswordRequest} request The change password request that contains all of the information used to change the password.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  changePassword: function(changePasswordId, request, callBack) {
      return this._start()
          .uri('/api/user/change-password')
          .urlSegment(changePasswordId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
   * bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
   * method.
   *
   * @param {ChangePasswordRequest} request The change password request that contains all of the information used to change the password.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  changePasswordByIdentity: function(request, callBack) {
      return this._start()
          .uri('/api/user/change-password')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Adds a comment to the user's account.
   *
   * @param {UserCommentRequest} request The request object that contains all of the information used to create the user comment.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  commentOnUser: function(request, callBack) {
      return this._start()
          .uri('/api/user/comment')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.
   *
   * @param {?string} applicationId (Optional) The Id to use for the application. If not provided a secure random UUID will be generated.
   * @param {ApplicationRequest} request The request object that contains all of the information used to create the application.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createApplication: function(applicationId, request, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a new role for an application. You must specify the id of the application you are creating the role for.
   * You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.
   *
   * @param {string} applicationId The Id of the application to create the role on.
   * @param {?string} roleId (Optional) The Id of the role. If not provided a secure random UUID will be generated.
   * @param {ApplicationRequest} request The request object that contains all of the information used to create the application role.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createApplicationRole: function(applicationId, roleId, request, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .urlSegment("role")
          .urlSegment(roleId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
   * make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
   * written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.
   *
   * @param {AuditLogRequest} request The request object that contains all of the information used to create the audit log entry.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createAuditLog: function(request, callBack) {
      return this._start()
          .uri('/api/system/audit-log')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a user consent type. You can optionally specify an Id for the consent type, if not provided one will be generated.
   *
   * @param {?string} consentId (Optional) The Id for the consent. If not provided a secure random UUID will be generated.
   * @param {ConsentRequest} request The request object that contains all of the information used to create the consent.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createConsent: function(consentId, request, callBack) {
      return this._start()
          .uri('/api/consent')
          .urlSegment(consentId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.
   *
   * @param {?string} emailTemplateId (Optional) The Id for the template. If not provided a secure random UUID will be generated.
   * @param {EmailTemplateRequest} request The request object that contains all of the information used to create the email template.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createEmailTemplate: function(emailTemplateId, request, callBack) {
      return this._start()
          .uri('/api/email/template')
          .urlSegment(emailTemplateId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a family with the user id in the request as the owner and sole member of the family. You can optionally specify an id for the
   * family, if not provided one will be generated.
   *
   * @param {?string} familyId (Optional) The id for the family. If not provided a secure random UUID will be generated.
   * @param {FamilyRequest} request The request object that contains all of the information used to create the family.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createFamily: function(familyId, request, callBack) {
      return this._start()
          .uri('/api/user/family')
          .urlSegment(familyId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.
   *
   * @param {?string} groupId (Optional) The Id for the group. If not provided a secure random UUID will be generated.
   * @param {GroupRequest} request The request object that contains all of the information used to create the group.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createGroup: function(groupId, request, callBack) {
      return this._start()
          .uri('/api/group')
          .urlSegment(groupId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a member in a group.
   *
   * @param {MemberRequest} request The request object that contains all of the information used to create the group member(s).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createGroupMembers: function(request, callBack) {
      return this._start()
          .uri('/api/group/member')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.
   *
   * @param {?string} identityProviderId (Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.
   * @param {IdentityProviderRequest} request The request object that contains all of the information used to create the identity provider.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createIdentityProvider: function(identityProviderId, request, callBack) {
      return this._start()
          .uri('/api/identity-provider')
          .urlSegment(identityProviderId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.
   *
   * @param {?string} lambdaId (Optional) The Id for the lambda. If not provided a secure random UUID will be generated.
   * @param {LambdaRequest} request The request object that contains all of the information used to create the lambda.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createLambda: function(lambdaId, request, callBack) {
      return this._start()
          .uri('/api/lambda')
          .urlSegment(lambdaId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.
   *
   * @param {?string} tenantId (Optional) The Id for the tenant. If not provided a secure random UUID will be generated.
   * @param {TenantRequest} request The request object that contains all of the information used to create the tenant.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createTenant: function(tenantId, request, callBack) {
      return this._start()
          .uri('/api/tenant')
          .urlSegment(tenantId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a Theme. You can optionally specify an Id for the theme, if not provided one will be generated.
   *
   * @param {?string} themeId (Optional) The Id for the theme. If not provided a secure random UUID will be generated.
   * @param {ThemeRequest} request The request object that contains all of the information used to create the theme.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createTheme: function(themeId, request, callBack) {
      return this._start()
          .uri('/api/theme')
          .urlSegment(themeId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
   *
   * @param {?string} userId (Optional) The Id for the user. If not provided a secure random UUID will be generated.
   * @param {UserRequest} request The request object that contains all of the information used to create the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createUser: function(userId, request, callBack) {
      return this._start()
          .uri('/api/user')
          .urlSegment(userId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
   * that the user action can be applied to any user.
   *
   * @param {?string} userActionId (Optional) The Id for the user action. If not provided a secure random UUID will be generated.
   * @param {UserActionRequest} request The request object that contains all of the information used to create the user action.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createUserAction: function(userActionId, request, callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlSegment(userActionId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
   * successfully. Anytime after that the user action reason can be used.
   *
   * @param {?string} userActionReasonId (Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.
   * @param {UserActionReasonRequest} request The request object that contains all of the information used to create the user action reason.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createUserActionReason: function(userActionReasonId, request, callBack) {
      return this._start()
          .uri('/api/user-action-reason')
          .urlSegment(userActionReasonId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a single User consent.
   *
   * @param {?string} userConsentId (Optional) The Id for the User consent. If not provided a secure random UUID will be generated.
   * @param {UserConsentRequest} request The request that contains the user consent information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createUserConsent: function(userConsentId, request, callBack) {
      return this._start()
          .uri('/api/user/consent')
          .urlSegment(userConsentId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.
   *
   * @param {?string} webhookId (Optional) The Id for the webhook. If not provided a secure random UUID will be generated.
   * @param {WebhookRequest} request The request object that contains all of the information used to create the webhook.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  createWebhook: function(webhookId, request, callBack) {
      return this._start()
          .uri('/api/webhook')
          .urlSegment(webhookId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Deactivates the application with the given Id.
   *
   * @param {string} applicationId The Id of the application to deactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deactivateApplication: function(applicationId, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .delete()
          .go(callBack);
  },

  /**
   * Deactivates the user with the given Id.
   *
   * @param {string} userId The Id of the user to deactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deactivateUser: function(userId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlSegment(userId)
          .delete()
          .go(callBack);
  },

  /**
   * Deactivates the user action with the given Id.
   *
   * @param {string} userActionId The Id of the user action to deactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deactivateUserAction: function(userActionId, callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlSegment(userActionId)
          .delete()
          .go(callBack);
  },

  /**
   * Deactivates the users with the given ids.
   *
   * @param {Array<string>} userIds The ids of the users to deactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deactivateUsers: function(userIds, callBack) {
      return this._start()
          .uri('/api/user/bulk')
          .urlParameter('userId', userIds)
          .delete()
          .go(callBack);
  },

  /**
   * Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
   * delete the application, any registrations for that application, metrics and reports for the application, all the
   * roles for the application, and any other data associated with the application. This operation could take a very
   * long time, depending on the amount of data in your database.
   *
   * @param {string} applicationId The Id of the application to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteApplication: function(applicationId, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .urlParameter('hardDelete', true)
          .delete()
          .go(callBack);
  },

  /**
   * Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
   * permanently removes the given role from all users that had it.
   *
   * @param {string} applicationId The Id of the application to deactivate.
   * @param {string} roleId The Id of the role to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteApplicationRole: function(applicationId, roleId, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .urlSegment("role")
          .urlSegment(roleId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the consent for the given Id.
   *
   * @param {string} consentId The Id of the consent to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteConsent: function(consentId, callBack) {
      return this._start()
          .uri('/api/consent')
          .urlSegment(consentId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the email template for the given Id.
   *
   * @param {string} emailTemplateId The Id of the email template to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteEmailTemplate: function(emailTemplateId, callBack) {
      return this._start()
          .uri('/api/email/template')
          .urlSegment(emailTemplateId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the group for the given Id.
   *
   * @param {string} groupId The Id of the group to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteGroup: function(groupId, callBack) {
      return this._start()
          .uri('/api/group')
          .urlSegment(groupId)
          .delete()
          .go(callBack);
  },

  /**
   * Removes users as members of a group.
   *
   * @param {MemberDeleteRequest} request The member request that contains all of the information used to remove members to the group.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteGroupMembers: function(request, callBack) {
      return this._start()
          .uri('/api/group/member')
          .setJSONBody(request)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the identity provider for the given Id.
   *
   * @param {string} identityProviderId The Id of the identity provider to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteIdentityProvider: function(identityProviderId, callBack) {
      return this._start()
          .uri('/api/identity-provider')
          .urlSegment(identityProviderId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the key for the given Id.
   *
   * @param {string} keyOd The Id of the key to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteKey: function(keyOd, callBack) {
      return this._start()
          .uri('/api/key')
          .urlSegment(keyOd)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the lambda for the given Id.
   *
   * @param {string} lambdaId The Id of the lambda to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteLambda: function(lambdaId, callBack) {
      return this._start()
          .uri('/api/lambda')
          .urlSegment(lambdaId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the user registration for the given user and application.
   *
   * @param {string} userId The Id of the user whose registration is being deleted.
   * @param {string} applicationId The Id of the application to remove the registration for.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteRegistration: function(userId, applicationId, callBack) {
      return this._start()
          .uri('/api/user/registration')
          .urlSegment(userId)
          .urlSegment(applicationId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the tenant for the given Id.
   *
   * @param {string} tenantId The Id of the tenant to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteTenant: function(tenantId, callBack) {
      return this._start()
          .uri('/api/tenant')
          .urlSegment(tenantId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the theme for the given Id.
   *
   * @param {string} themeId The Id of the theme to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteTheme: function(themeId, callBack) {
      return this._start()
          .uri('/api/theme')
          .urlSegment(themeId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
   * with the user.
   *
   * @param {string} userId The Id of the user to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteUser: function(userId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlSegment(userId)
          .urlParameter('hardDelete', true)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
   * the action being applied to any users.
   *
   * @param {string} userActionId The Id of the user action to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteUserAction: function(userActionId, callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlSegment(userActionId)
          .urlParameter('hardDelete', true)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the user action reason for the given Id.
   *
   * @param {string} userActionReasonId The Id of the user action reason to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteUserActionReason: function(userActionReasonId, callBack) {
      return this._start()
          .uri('/api/user-action-reason')
          .urlSegment(userActionReasonId)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the users with the given ids.
   *
   * @param {UserDeleteRequest} request The ids of the users to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteUsers: function(request, callBack) {
      return this._start()
          .uri('/api/user/bulk')
          .setJSONBody(request)
          .delete()
          .go(callBack);
  },

  /**
   * Deletes the webhook for the given Id.
   *
   * @param {string} webhookId The Id of the webhook to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  deleteWebhook: function(webhookId, callBack) {
      return this._start()
          .uri('/api/webhook')
          .urlSegment(webhookId)
          .delete()
          .go(callBack);
  },

  /**
   * Disable Two Factor authentication for a user.
   *
   * @param {string} userId The Id of the User for which you're disabling Two Factor authentication.
   * @param {string} code The Two Factor code used verify the the caller knows the Two Factor secret.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  disableTwoFactor: function(userId, code, callBack) {
      return this._start()
          .uri('/api/user/two-factor')
          .urlParameter('userId', userId)
          .urlParameter('code', code)
          .delete()
          .go(callBack);
  },

  /**
   * Enable Two Factor authentication for a user.
   *
   * @param {string} userId The Id of the user to enable Two Factor authentication.
   * @param {TwoFactorRequest} request The two factor enable request information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  enableTwoFactor: function(userId, request, callBack) {
      return this._start()
          .uri('/api/user/two-factor')
          .urlSegment(userId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Exchange a refresh token for a new JWT.
   *
   * @param {RefreshRequest} request The refresh request.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  exchangeRefreshTokenForJWT: function(request, callBack) {
      return this._start()
          .uri('/api/jwt/refresh')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.
   *
   * @param {ForgotPasswordRequest} request The request that contains the information about the user so that they can be emailed.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  forgotPassword: function(request, callBack) {
      return this._start()
          .uri('/api/user/forgot-password')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
   * email to the User. This API may be used to collect the verificationId for use with a third party system.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  generateEmailVerificationId: function(email, callBack) {
      return this._start()
          .uri('/api/user/verify-email')
          .urlParameter('email', email)
          .urlParameter('sendVerifyEmail', false)
          .put()
          .go(callBack);
  },

  /**
   * Generate a new RSA or EC key pair or an HMAC secret.
   *
   * @param {?string} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
   * @param {KeyRequest} request The request object that contains all of the information used to create the key.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  generateKey: function(keyId, request, callBack) {
      return this._start()
          .uri('/api/key/generate')
          .urlSegment(keyId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
   * email to the User. This API may be used to collect the verificationId for use with a third party system.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {string} applicationId The Id of the application to be verified.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  generateRegistrationVerificationId: function(email, applicationId, callBack) {
      return this._start()
          .uri('/api/user/verify-registration')
          .urlParameter('email', email)
          .urlParameter('sendVerifyPasswordEmail', false)
          .urlParameter('applicationId', applicationId)
          .put()
          .go(callBack);
  },

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   * application such as Google Authenticator.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  generateTwoFactorSecret: function(callBack) {
      return this._start()
          .uri('/api/two-factor/secret')
          .get()
          .go(callBack);
  },

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   * application such as Google Authenticator.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  generateTwoFactorSecretUsingJWT: function(encodedJWT, callBack) {
      return this._start()
          .uri('/api/two-factor/secret')
          .authorization('JWT ' + encodedJWT)
          .get()
          .go(callBack);
  },

  /**
   * Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
   * login systems.
   *
   * @param {IdentityProviderLoginRequest} request The third-party login request that contains information from the third-party login
   *    providers that FusionAuth uses to reconcile the user's account.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  identityProviderLogin: function(request, callBack) {
      return this._start()
          .uri('/api/identity-provider/login')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Import an existing RSA or EC key pair or an HMAC secret.
   *
   * @param {?string} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
   * @param {KeyRequest} request The request object that contains all of the information used to create the key.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  importKey: function(keyId, request, callBack) {
      return this._start()
          .uri('/api/key/import')
          .urlSegment(keyId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Bulk imports multiple users. This does some validation, but then tries to run batch inserts of users. This reduces
   * latency when inserting lots of users. Therefore, the error response might contain some information about failures,
   * but it will likely be pretty generic.
   *
   * @param {ImportRequest} request The request that contains all of the information about all of the users to import.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  importUsers: function(request, callBack) {
      return this._start()
          .uri('/api/user/import')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
   * access token is properly signed and not expired.
   * <p>
   * This API may be used in an SSO configuration to issue new tokens for another application after the user has
   * obtained a valid token from authentication.
   *
   * @param {string} applicationId The Application Id for which you are requesting a new access token be issued.
   * @param {string} encodedJWT The encoded JWT (access token).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  issueJWT: function(applicationId, encodedJWT, callBack) {
      return this._start()
          .uri('/api/jwt/issue')
          .authorization('JWT ' + encodedJWT)
          .urlParameter('applicationId', applicationId)
          .get()
          .go(callBack);
  },

  /**
   * Authenticates a user to FusionAuth. 
   * 
   * This API optionally requires an API key. See <code>Application.loginConfiguration.requireAuthentication</code>.
   *
   * @param {LoginRequest} request The login request that contains the user credentials used to log them in.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  login: function(request, callBack) {
      return this._start()
          .uri('/api/login')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
   * FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
   * application where they no longer have a session. This helps correctly track login counts, times and helps with
   * reporting.
   *
   * @param {string} userId The Id of the user that was logged in.
   * @param {string} applicationId The Id of the application that they logged into.
   * @param {?string} callerIPAddress (Optional) The IP address of the end-user that is logging in. If a null value is provided
   *    the IP address will be that of the client or last proxy that sent the request.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  loginPing: function(userId, applicationId, callerIPAddress, callBack) {
      return this._start()
          .uri('/api/login')
          .urlSegment(userId)
          .urlSegment(applicationId)
          .urlParameter('ipAddress', callerIPAddress)
          .put()
          .go(callBack);
  },

  /**
   * The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
   * client and revoke the refresh token stored. This API does nothing if the request does not contain an access
   * token or refresh token cookies.
   *
   * @param {boolean} global When this value is set to true all of the refresh tokens issued to the owner of the
   *    provided token will be revoked.
   * @param {?string} refreshToken (Optional) The refresh_token as a request parameter instead of coming in via a cookie.
   *    If provided this takes precedence over the cookie.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  logout: function(global, refreshToken, callBack) {
      return this._start()
          .header('Content-Type', 'text/plain')
          .uri('/api/logout')
          .urlParameter('global', global)
          .urlParameter('refreshToken', refreshToken)
          .post()
          .go(callBack);
  },

  /**
   * Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
   * by a registered identity provider. A 404 indicates the domain is not managed.
   *
   * @param {string} domain The domain or email address to lookup.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  lookupIdentityProvider: function(domain, callBack) {
      return this._start()
          .uri('/api/identity-provider/lookup')
          .urlParameter('domain', domain)
          .get()
          .go(callBack);
  },

  /**
   * Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
   * action.
   *
   * @param {string} actionId The Id of the action to modify. This is technically the user action log id.
   * @param {ActionRequest} request The request that contains all of the information about the modification.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  modifyAction: function(actionId, request, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlSegment(actionId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Complete a login request using a passwordless code
   *
   * @param {PasswordlessLoginRequest} request The passwordless login request that contains all of the information used to complete login.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  passwordlessLogin: function(request, callBack) {
      return this._start()
          .uri('/api/passwordless/login')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Reactivates the application with the given Id.
   *
   * @param {string} applicationId The Id of the application to reactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  reactivateApplication: function(applicationId, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .urlParameter('reactivate', true)
          .put()
          .go(callBack);
  },

  /**
   * Reactivates the user with the given Id.
   *
   * @param {string} userId The Id of the user to reactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  reactivateUser: function(userId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlSegment(userId)
          .urlParameter('reactivate', true)
          .put()
          .go(callBack);
  },

  /**
   * Reactivates the user action with the given Id.
   *
   * @param {string} userActionId The Id of the user action to reactivate.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  reactivateUserAction: function(userActionId, callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlSegment(userActionId)
          .urlParameter('reactivate', true)
          .put()
          .go(callBack);
  },

  /**
   * Reconcile a User to FusionAuth using JWT issued from another Identity Provider.
   *
   * @param {IdentityProviderLoginRequest} request The reconcile request that contains the data to reconcile the User.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  reconcileJWT: function(request, callBack) {
      return this._start()
          .uri('/api/jwt/reconcile')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Request a refresh of the User search index. This API is not generally necessary and the search index will become consistent in a
   * reasonable amount of time. There may be scenarios where you may wish to manually request an index refresh. One example may be 
   * if you are using the Search API or Delete Tenant API immediately following a User Create etc, you may wish to request a refresh to
   *  ensure the index immediately current before making a query request to the search index.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  refreshUserSearchIndex: function(callBack) {
      return this._start()
          .uri('/api/user/search')
          .put()
          .go(callBack);
  },

  /**
   * Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
   * will create the user as well as register them for the application. This is called a Full Registration. However, if
   * you only provide the UserRegistration object, then the user must already exist and they will be registered for the
   * application. The user id can also be provided and it will either be used to look up an existing user or it will be
   * used for the newly created User.
   *
   * @param {?string} userId (Optional) The Id of the user being registered for the application and optionally created.
   * @param {RegistrationRequest} request The request that optionally contains the User and must contain the UserRegistration.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  register: function(userId, request, callBack) {
      return this._start()
          .uri('/api/user/registration')
          .urlSegment(userId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Removes a user from the family with the given id.
   *
   * @param {string} familyId The id of the family to remove the user from.
   * @param {string} userId The id of the user to remove from the family.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  removeUserFromFamily: function(familyId, userId, callBack) {
      return this._start()
          .uri('/api/user/family')
          .urlSegment(familyId)
          .urlSegment(userId)
          .delete()
          .go(callBack);
  },

  /**
   * Re-sends the verification email to the user.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  resendEmailVerification: function(email, callBack) {
      return this._start()
          .uri('/api/user/verify-email')
          .urlParameter('email', email)
          .put()
          .go(callBack);
  },

  /**
   * Re-sends the application registration verification email to the user.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {string} applicationId The Id of the application to be verified.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  resendRegistrationVerification: function(email, applicationId, callBack) {
      return this._start()
          .uri('/api/user/verify-registration')
          .urlParameter('email', email)
          .urlParameter('applicationId', applicationId)
          .put()
          .go(callBack);
  },

  /**
   * Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.
   *
   * @param {string} actionId The Id of the action to retrieve.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveAction: function(actionId, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlSegment(actionId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
   * and inactive as well as non-time based actions.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveActions: function(userId, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlParameter('userId', userId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveActionsPreventingLogin: function(userId, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlParameter('userId', userId)
          .urlParameter('preventingLogin', true)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the actions for the user with the given Id that are currently active.
   * An active action means one that is time based and has not been canceled, and has not ended.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveActiveActions: function(userId, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlParameter('userId', userId)
          .urlParameter('active', true)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the application for the given id or all of the applications if the id is null.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveApplication: function(applicationId, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the applications.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveApplications: function(callBack) {
      return this._start()
          .uri('/api/application')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves a single audit log for the given Id.
   *
   * @param {number} auditLogId The Id of the audit log to retrieve.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveAuditLog: function(auditLogId, callBack) {
      return this._start()
          .uri('/api/system/audit-log')
          .urlSegment(auditLogId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the Consent for the given Id.
   *
   * @param {string} consentId The Id of the consent.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveConsent: function(consentId, callBack) {
      return this._start()
          .uri('/api/consent')
          .urlSegment(consentId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the consent.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveConsents: function(callBack) {
      return this._start()
          .uri('/api/consent')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the daily active user report between the two instants. If you specify an application id, it will only
   * return the daily active counts for that application.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveDailyActiveReport: function(applicationId, start, end, callBack) {
      return this._start()
          .uri('/api/report/daily-active-user')
          .urlParameter('applicationId', applicationId)
          .urlParameter('start', start)
          .urlParameter('end', end)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.
   *
   * @param {?string} emailTemplateId (Optional) The Id of the email template.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveEmailTemplate: function(emailTemplateId, callBack) {
      return this._start()
          .uri('/api/email/template')
          .urlSegment(emailTemplateId)
          .get()
          .go(callBack);
  },

  /**
   * Creates a preview of the email template provided in the request. This allows you to preview an email template that
   * hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
   * will create the preview based on whatever is given.
   *
   * @param {PreviewRequest} request The request that contains the email template and optionally a locale to render it in.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveEmailTemplatePreview: function(request, callBack) {
      return this._start()
          .uri('/api/email/template/preview')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Retrieves all of the email templates.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveEmailTemplates: function(callBack) {
      return this._start()
          .uri('/api/email/template')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves a single event log for the given Id.
   *
   * @param {number} eventLogId The Id of the event log to retrieve.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveEventLog: function(eventLogId, callBack) {
      return this._start()
          .uri('/api/system/event-log')
          .urlSegment(eventLogId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the families that a user belongs to.
   *
   * @param {string} userId The User's id
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveFamilies: function(userId, callBack) {
      return this._start()
          .uri('/api/user/family')
          .urlParameter('userId', userId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the members of a family by the unique Family Id.
   *
   * @param {string} familyId The unique Id of the Family.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveFamilyMembersByFamilyId: function(familyId, callBack) {
      return this._start()
          .uri('/api/user/family')
          .urlSegment(familyId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the group for the given Id.
   *
   * @param {string} groupId The Id of the group.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveGroup: function(groupId, callBack) {
      return this._start()
          .uri('/api/group')
          .urlSegment(groupId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the groups.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveGroups: function(callBack) {
      return this._start()
          .uri('/api/group')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the identity provider for the given id or all of the identity providers if the id is null.
   *
   * @param {?string} identityProviderId (Optional) The identity provider id.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveIdentityProvider: function(identityProviderId, callBack) {
      return this._start()
          .uri('/api/identity-provider')
          .urlSegment(identityProviderId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the identity providers.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveIdentityProviders: function(callBack) {
      return this._start()
          .uri('/api/identity-provider')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the actions for the user with the given Id that are currently inactive.
   * An inactive action means one that is time based and has been canceled or has expired, or is not time based.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveInactiveActions: function(userId, callBack) {
      return this._start()
          .uri('/api/user/action')
          .urlParameter('userId', userId)
          .urlParameter('active', false)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the applications that are currently inactive.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveInactiveApplications: function(callBack) {
      return this._start()
          .uri('/api/application')
          .urlParameter('inactive', true)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the user actions that are currently inactive.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveInactiveUserActions: function(callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlParameter('inactive', true)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the available integrations.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveIntegration: function(callBack) {
      return this._start()
          .uri('/api/integration')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id (kid).
   *
   * @param {string} keyId The Id of the public key (kid).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveJWTPublicKey: function(keyId, callBack) {
      return this._start()
          .uri('/api/jwt/public-key')
          .urlParameter('kid', keyId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the Public Key configured for verifying the JSON Web Tokens (JWT) issued by the Login API by the Application Id.
   *
   * @param {string} applicationId The Id of the Application for which this key is used.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveJWTPublicKeyByApplicationId: function(applicationId, callBack) {
      return this._start()
          .uri('/api/jwt/public-key')
          .urlParameter('applicationId', applicationId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveJWTPublicKeys: function(callBack) {
      return this._start()
          .uri('/api/jwt/public-key')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the key for the given Id.
   *
   * @param {string} keyId The Id of the key.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveKey: function(keyId, callBack) {
      return this._start()
          .uri('/api/key')
          .urlSegment(keyId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the keys.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveKeys: function(callBack) {
      return this._start()
          .uri('/api/key')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the lambda for the given Id.
   *
   * @param {string} lambdaId The Id of the lambda.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveLambda: function(lambdaId, callBack) {
      return this._start()
          .uri('/api/lambda')
          .urlSegment(lambdaId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the lambdas.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveLambdas: function(callBack) {
      return this._start()
          .uri('/api/lambda')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the lambdas for the provided type.
   *
   * @param {LambdaType} type The type of the lambda to return.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveLambdasByType: function(type, callBack) {
      return this._start()
          .uri('/api/lambda')
          .urlParameter('type', type)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the login report between the two instants. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveLoginReport: function(applicationId, start, end, callBack) {
      return this._start()
          .uri('/api/report/login')
          .urlParameter('applicationId', applicationId)
          .urlParameter('start', start)
          .urlParameter('end', end)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
   * return the monthly active counts for that application.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveMonthlyActiveReport: function(applicationId, start, end, callBack) {
      return this._start()
          .uri('/api/report/monthly-active-user')
          .urlParameter('applicationId', applicationId)
          .urlParameter('start', start)
          .urlParameter('end', end)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the Oauth2 configuration for the application for the given Application Id.
   *
   * @param {string} applicationId The Id of the Application to retrieve OAuth configuration.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveOauthConfiguration: function(applicationId, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .urlSegment("oauth-configuration")
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the password validation rules for a specific tenant. This method requires a tenantId to be provided 
   * through the use of a Tenant scoped API key or an HTTP header X-FusionAuth-TenantId to specify the Tenant Id.
   * 
   * This API does not require an API key.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrievePasswordValidationRules: function(callBack) {
      return this._start()
          .uri('/api/tenant/password-validation-rules')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the password validation rules for a specific tenant.
   * 
   * This API does not require an API key.
   *
   * @param {string} tenantId The Id of the tenant.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrievePasswordValidationRulesWithTenantId: function(tenantId, callBack) {
      return this._start()
          .uri('/api/tenant/password-validation-rules')
          .urlSegment(tenantId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the children for the given parent email address.
   *
   * @param {string} parentEmail The email of the parent.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrievePendingChildren: function(parentEmail, callBack) {
      return this._start()
          .uri('/api/user/family/pending')
          .urlParameter('parentEmail', parentEmail)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the last number of login records.
   *
   * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
   * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveRecentLogins: function(offset, limit, callBack) {
      return this._start()
          .uri('/api/user/recent-login')
          .urlParameter('offset', offset)
          .urlParameter('limit', limit)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the refresh tokens that belong to the user with the given Id.
   *
   * @param {string} userId The Id of the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveRefreshTokens: function(userId, callBack) {
      return this._start()
          .uri('/api/jwt/refresh')
          .urlParameter('userId', userId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user registration for the user with the given id and the given application id.
   *
   * @param {string} userId The Id of the user.
   * @param {string} applicationId The Id of the application.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveRegistration: function(userId, applicationId, callBack) {
      return this._start()
          .uri('/api/user/registration')
          .urlSegment(userId)
          .urlSegment(applicationId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the registration report between the two instants. If you specify an application id, it will only return
   * the registration counts for that application.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveRegistrationReport: function(applicationId, start, end, callBack) {
      return this._start()
          .uri('/api/report/registration')
          .urlParameter('applicationId', applicationId)
          .urlParameter('start', start)
          .urlParameter('end', end)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the system configuration.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveSystemConfiguration: function(callBack) {
      return this._start()
          .uri('/api/system-configuration')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the tenant for the given Id.
   *
   * @param {string} tenantId The Id of the tenant.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveTenant: function(tenantId, callBack) {
      return this._start()
          .uri('/api/tenant')
          .urlSegment(tenantId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the tenants.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveTenants: function(callBack) {
      return this._start()
          .uri('/api/tenant')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the theme for the given Id.
   *
   * @param {string} themeId The Id of the theme.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveTheme: function(themeId, callBack) {
      return this._start()
          .uri('/api/theme')
          .urlSegment(themeId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the themes.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveThemes: function(callBack) {
      return this._start()
          .uri('/api/theme')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the totals report. This contains all of the total counts for each application and the global registration
   * count.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveTotalReport: function(callBack) {
      return this._start()
          .uri('/api/report/totals')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user for the given Id.
   *
   * @param {string} userId The Id of the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUser: function(userId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlSegment(userId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
   * actions.
   *
   * @param {?string} userActionId (Optional) The Id of the user action.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserAction: function(userActionId, callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlSegment(userActionId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
   * action reasons.
   *
   * @param {?string} userActionReasonId (Optional) The Id of the user action reason.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserActionReason: function(userActionReasonId, callBack) {
      return this._start()
          .uri('/api/user-action-reason')
          .urlSegment(userActionReasonId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all the user action reasons.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserActionReasons: function(callBack) {
      return this._start()
          .uri('/api/user-action-reason')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the user actions.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserActions: function(callBack) {
      return this._start()
          .uri('/api/user-action')
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
   * password workflow has been initiated and you may not know the user's email or username.
   *
   * @param {string} changePasswordId The unique change password Id that was sent via email or returned by the Forgot Password API.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserByChangePasswordId: function(changePasswordId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlParameter('changePasswordId', changePasswordId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user for the given email.
   *
   * @param {string} email The email of the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserByEmail: function(email, callBack) {
      return this._start()
          .uri('/api/user')
          .urlParameter('email', email)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user for the loginId. The loginId can be either the username or the email.
   *
   * @param {string} loginId The email or username of the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserByLoginId: function(loginId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlParameter('loginId', loginId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user for the given username.
   *
   * @param {string} username The username of the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserByUsername: function(username, callBack) {
      return this._start()
          .uri('/api/user')
          .urlParameter('username', username)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
   * password workflow has been initiated and you may not know the user's email or username.
   *
   * @param {string} verificationId The unique verification Id that has been set on the user object.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserByVerificationId: function(verificationId, callBack) {
      return this._start()
          .uri('/api/user')
          .urlParameter('verificationId', verificationId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the comments for the user with the given Id.
   *
   * @param {string} userId The Id of the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserComments: function(userId, callBack) {
      return this._start()
          .uri('/api/user/comment')
          .urlSegment(userId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieve a single User consent by Id.
   *
   * @param {string} userConsentId The User consent Id
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserConsent: function(userConsentId, callBack) {
      return this._start()
          .uri('/api/user/consent')
          .urlSegment(userConsentId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all of the consents for a User.
   *
   * @param {string} userId The User's Id
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserConsents: function(userId, callBack) {
      return this._start()
          .uri('/api/user/consent')
          .urlParameter('userId', userId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {string} userId The userId id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserLoginReport: function(applicationId, userId, start, end, callBack) {
      return this._start()
          .uri('/api/report/login')
          .urlParameter('applicationId', applicationId)
          .urlParameter('userId', userId)
          .urlParameter('start', start)
          .urlParameter('end', end)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {?string} applicationId (Optional) The application id.
   * @param {string} loginId The userId id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserLoginReportByLoginId: function(applicationId, loginId, start, end, callBack) {
      return this._start()
          .uri('/api/report/login')
          .urlParameter('applicationId', applicationId)
          .urlParameter('loginId', loginId)
          .urlParameter('start', start)
          .urlParameter('end', end)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the last number of login records for a user.
   *
   * @param {string} userId The Id of the user.
   * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
   * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserRecentLogins: function(userId, offset, limit, callBack) {
      return this._start()
          .uri('/api/user/recent-login')
          .urlParameter('userId', userId)
          .urlParameter('offset', offset)
          .urlParameter('limit', limit)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveUserUsingJWT: function(encodedJWT, callBack) {
      return this._start()
          .uri('/api/user')
          .authorization('JWT ' + encodedJWT)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.
   *
   * @param {?string} webhookId (Optional) The Id of the webhook.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveWebhook: function(webhookId, callBack) {
      return this._start()
          .uri('/api/webhook')
          .urlSegment(webhookId)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves all the webhooks.
   *
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  retrieveWebhooks: function(callBack) {
      return this._start()
          .uri('/api/webhook')
          .get()
          .go(callBack);
  },

  /**
   * Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
   * and an application id, this will delete all the refresh tokens for that user for that application.
   *
   * @param {?string} token (Optional) The refresh token to delete.
   * @param {?string} userId (Optional) The user id whose tokens to delete.
   * @param {?string} applicationId (Optional) The application id of the tokens to delete.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  revokeRefreshToken: function(token, userId, applicationId, callBack) {
      return this._start()
          .uri('/api/jwt/refresh')
          .urlParameter('token', token)
          .urlParameter('userId', userId)
          .urlParameter('applicationId', applicationId)
          .delete()
          .go(callBack);
  },

  /**
   * Revokes a single User consent by Id.
   *
   * @param {string} userConsentId The User Consent Id
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  revokeUserConsent: function(userConsentId, callBack) {
      return this._start()
          .uri('/api/user/consent')
          .urlSegment(userConsentId)
          .delete()
          .go(callBack);
  },

  /**
   * Searches the audit logs with the specified criteria and pagination.
   *
   * @param {AuditLogSearchRequest} request The search criteria and pagination information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  searchAuditLogs: function(request, callBack) {
      return this._start()
          .uri('/api/system/audit-log/search')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Searches the event logs with the specified criteria and pagination.
   *
   * @param {EventLogSearchRequest} request The search criteria and pagination information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  searchEventLogs: function(request, callBack) {
      return this._start()
          .uri('/api/system/event-log/search')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Searches the login records with the specified criteria and pagination.
   *
   * @param {LoginRecordSearchRequest} request The search criteria and pagination information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  searchLoginRecords: function(request, callBack) {
      return this._start()
          .uri('/api/system/login-record/search')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Retrieves the users for the given ids. If any id is invalid, it is ignored.
   *
   * @param {Array<string>} ids The user ids to search for.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  searchUsers: function(ids, callBack) {
      return this._start()
          .uri('/api/user/search')
          .urlParameter('ids', ids)
          .get()
          .go(callBack);
  },

  /**
   * Retrieves the users for the given search criteria and pagination.
   *
   * @param {SearchRequest} request The search criteria and pagination constraints. Fields used: queryString, numberOfResults, startRow,
   *    and sort fields.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  searchUsersByQueryString: function(request, callBack) {
      return this._start()
          .uri('/api/user/search')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
   * pairs in the email template.
   *
   * @param {string} emailTemplateId The id for the template.
   * @param {SendRequest} request The send email request that contains all of the information used to send the email.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  sendEmail: function(emailTemplateId, request, callBack) {
      return this._start()
          .uri('/api/email/send')
          .urlSegment(emailTemplateId)
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Sends out an email to a parent that they need to register and create a family or need to log in and add a child to their existing family.
   *
   * @param {FamilyEmailRequest} request The request object that contains the parent email.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  sendFamilyRequestEmail: function(request, callBack) {
      return this._start()
          .uri('/api/user/family/request')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Send a passwordless authentication code in an email to complete login.
   *
   * @param {PasswordlessSendRequest} request The passwordless send request that contains all of the information used to send an email containing a code.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  sendPasswordlessCode: function(request, callBack) {
      return this._start()
          .uri('/api/passwordless/send')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
   *
   * @param {TwoFactorSendRequest} request The request object that contains all of the information used to send the code.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  sendTwoFactorCode: function(request, callBack) {
      return this._start()
          .uri('/api/two-factor/send')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Send a Two Factor authentication code to allow the completion of Two Factor authentication.
   *
   * @param {string} twoFactorId The Id returned by the Login API necessary to complete Two Factor authentication.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  sendTwoFactorCodeForLogin: function(twoFactorId, callBack) {
      return this._start()
          .header('Content-Type', 'text/plain')
          .uri('/api/two-factor/send')
          .urlSegment(twoFactorId)
          .post()
          .go(callBack);
  },

  /**
   * Complete login using a 2FA challenge
   *
   * @param {TwoFactorLoginRequest} request The login request that contains the user credentials used to log them in.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  twoFactorLogin: function(request, callBack) {
      return this._start()
          .uri('/api/two-factor/login')
          .setJSONBody(request)
          .post()
          .go(callBack);
  },

  /**
   * Updates the application with the given Id.
   *
   * @param {string} applicationId The Id of the application to update.
   * @param {ApplicationRequest} request The request that contains all of the new application information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateApplication: function(applicationId, request, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the application role with the given id for the application.
   *
   * @param {string} applicationId The Id of the application that the role belongs to.
   * @param {string} roleId The Id of the role to update.
   * @param {ApplicationRequest} request The request that contains all of the new role information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateApplicationRole: function(applicationId, roleId, request, callBack) {
      return this._start()
          .uri('/api/application')
          .urlSegment(applicationId)
          .urlSegment("role")
          .urlSegment(roleId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the consent with the given Id.
   *
   * @param {string} consentId The Id of the consent to update.
   * @param {ConsentRequest} request The request that contains all of the new consent information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateConsent: function(consentId, request, callBack) {
      return this._start()
          .uri('/api/consent')
          .urlSegment(consentId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the email template with the given Id.
   *
   * @param {string} emailTemplateId The Id of the email template to update.
   * @param {EmailTemplateRequest} request The request that contains all of the new email template information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateEmailTemplate: function(emailTemplateId, request, callBack) {
      return this._start()
          .uri('/api/email/template')
          .urlSegment(emailTemplateId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the group with the given Id.
   *
   * @param {string} groupId The Id of the group to update.
   * @param {GroupRequest} request The request that contains all of the new group information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateGroup: function(groupId, request, callBack) {
      return this._start()
          .uri('/api/group')
          .urlSegment(groupId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the identity provider with the given Id.
   *
   * @param {string} identityProviderId The Id of the identity provider to update.
   * @param {IdentityProviderRequest} request The request object that contains the updated identity provider.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateIdentityProvider: function(identityProviderId, request, callBack) {
      return this._start()
          .uri('/api/identity-provider')
          .urlSegment(identityProviderId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the available integrations.
   *
   * @param {IntegrationRequest} request The request that contains all of the new integration information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateIntegrations: function(request, callBack) {
      return this._start()
          .uri('/api/integration')
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the key with the given Id.
   *
   * @param {string} keyId The Id of the key to update.
   * @param {KeyRequest} request The request that contains all of the new key information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateKey: function(keyId, request, callBack) {
      return this._start()
          .uri('/api/key')
          .urlSegment(keyId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the lambda with the given Id.
   *
   * @param {string} lambdaId The Id of the lambda to update.
   * @param {LambdaRequest} request The request that contains all of the new lambda information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateLambda: function(lambdaId, request, callBack) {
      return this._start()
          .uri('/api/lambda')
          .urlSegment(lambdaId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the registration for the user with the given id and the application defined in the request.
   *
   * @param {string} userId The Id of the user whose registration is going to be updated.
   * @param {RegistrationRequest} request The request that contains all of the new registration information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateRegistration: function(userId, request, callBack) {
      return this._start()
          .uri('/api/user/registration')
          .urlSegment(userId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the system configuration.
   *
   * @param {SystemConfigurationRequest} request The request that contains all of the new system configuration information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateSystemConfiguration: function(request, callBack) {
      return this._start()
          .uri('/api/system-configuration')
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the tenant with the given Id.
   *
   * @param {string} tenantId The Id of the tenant to update.
   * @param {TenantRequest} request The request that contains all of the new tenant information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateTenant: function(tenantId, request, callBack) {
      return this._start()
          .uri('/api/tenant')
          .urlSegment(tenantId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the theme with the given Id.
   *
   * @param {string} themeId The Id of the theme to update.
   * @param {ThemeRequest} request The request that contains all of the new theme information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateTheme: function(themeId, request, callBack) {
      return this._start()
          .uri('/api/theme')
          .urlSegment(themeId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the user with the given Id.
   *
   * @param {string} userId The Id of the user to update.
   * @param {UserRequest} request The request that contains all of the new user information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateUser: function(userId, request, callBack) {
      return this._start()
          .uri('/api/user')
          .urlSegment(userId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the user action with the given Id.
   *
   * @param {string} userActionId The Id of the user action to update.
   * @param {UserActionRequest} request The request that contains all of the new user action information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateUserAction: function(userActionId, request, callBack) {
      return this._start()
          .uri('/api/user-action')
          .urlSegment(userActionId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the user action reason with the given Id.
   *
   * @param {string} userActionReasonId The Id of the user action reason to update.
   * @param {UserActionReasonRequest} request The request that contains all of the new user action reason information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateUserActionReason: function(userActionReasonId, request, callBack) {
      return this._start()
          .uri('/api/user-action-reason')
          .urlSegment(userActionReasonId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates a single User consent by Id.
   *
   * @param {string} userConsentId The User Consent Id
   * @param {UserConsentRequest} request The request that contains the user consent information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateUserConsent: function(userConsentId, request, callBack) {
      return this._start()
          .uri('/api/user/consent')
          .urlSegment(userConsentId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Updates the webhook with the given Id.
   *
   * @param {string} webhookId The Id of the webhook to update.
   * @param {WebhookRequest} request The request that contains all of the new webhook information.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  updateWebhook: function(webhookId, request, callBack) {
      return this._start()
          .uri('/api/webhook')
          .urlSegment(webhookId)
          .setJSONBody(request)
          .put()
          .go(callBack);
  },

  /**
   * Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
   * signed and not expired.
   * <p>
   * This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  validateJWT: function(encodedJWT, callBack) {
      return this._start()
          .uri('/api/jwt/validate')
          .authorization('JWT ' + encodedJWT)
          .get()
          .go(callBack);
  },

  /**
   * Confirms a email verification. The Id given is usually from an email sent to the user.
   *
   * @param {string} verificationId The email verification id sent to the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  verifyEmail: function(verificationId, callBack) {
      return this._start()
          .header('Content-Type', 'text/plain')
          .uri('/api/user/verify-email')
          .urlSegment(verificationId)
          .post()
          .go(callBack);
  },

  /**
   * Confirms an application registration. The Id given is usually from an email sent to the user.
   *
   * @param {string} verificationId The registration verification Id sent to the user.
   * @param {Function} callBack The response handler call back. This function will be passed the ClientResponse object.
   */
  verifyRegistration: function(verificationId, callBack) {
      return this._start()
          .header('Content-Type', 'text/plain')
          .uri('/api/user/verify-registration')
          .urlSegment(verificationId)
          .post()
          .go(callBack);
  },

  /* ===================================================================================================================
   * Private methods
   * ===================================================================================================================*/

  /**
   * creates a rest client
   *
   * @returns {RESTClient} The RESTClient that will be used to call.
   * @private
   */
  _start: function() {
    return new RESTClient().authorization(this.apiKey).setUrl(this.host);
  }
};

/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} AccessToken
 *
 * @property {    string} [access_token]
 * @property {    string} [clientId]
 * @property {    number} [expires_in]
 * @property {    string} [id_token]
 * @property {    string} [redirectURI]
 * @property {    string} [refresh_token]
 * @property {    string} [scope]
 * @property {    TokenType} [token_type]
 * @property {    string} [userId]
 */


/**
 * @typedef {Object} ActionData
 *
 * @property {    UserAction} [action]
 * @property {    User} [actionee]
 * @property {    string} [actioneeUserId]
 * @property {    User} [actioner]
 * @property {    string} [actionerUserId]
 * @property {    Array
<    string>} [applicationIds]
 * @property {    string} [comment]
 * @property {    boolean} [emailUser]
 * @property {    number} [expiry]
 * @property {    UserActionLog} [log]
 * @property {    boolean} [notifyUser]
 * @property {    string} [option]
 * @property {    UserActionReason} [reason]
 * @property {    string} [reasonId]
 * @property {    string} [userActionId]
 */


/**
 * The user action request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ActionRequest
 *
 * @property {    ActionData} [action]
 * @property {    boolean} [broadcast]
 */


/**
 * The user action response object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ActionResponse
 *
 * @property {    UserActionLog} [action]
 * @property {    Array
<    UserActionLog>} [actions]
 */


/**
 * Available JSON Web Algorithms (JWA) as described in RFC 7518 available for this JWT implementation.
 *
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var Algorithm = {
  ES256: "ES256",
  ES384: "ES384",
  ES512: "ES512",
  HS256: "HS256",
  HS384: "HS384",
  HS512: "HS512",
  RS256: "RS256",
  RS384: "RS384",
  RS512: "RS512",
  none: "none"
};

/**
 * @author Seth Musselman
 *
 * @typedef {Object} Application
 *
 * @property {    boolean} [active]
 * @property {    AuthenticationTokenConfiguration} [authenticationTokenConfiguration]
 * @property {    CleanSpeakConfiguration} [cleanSpeakConfiguration]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [id]
 * @property {    JWTConfiguration} [jwtConfiguration]
 * @property {    LambdaConfiguration} [lambdaConfiguration]
 * @property {    LoginConfiguration} [loginConfiguration]
 * @property {    string} [name]
 * @property {    OAuth2Configuration} [oauthConfiguration]
 * @property {    PasswordlessConfiguration} [passwordlessConfiguration]
 * @property {    RegistrationConfiguration} [registrationConfiguration]
 * @property {    Array
<    ApplicationRole>} [roles]
 * @property {    SAMLv2Configuration} [samlv2Configuration]
 * @property {    string} [tenantId]
 * @property {    string} [verificationEmailTemplateId]
 * @property {    boolean} [verifyRegistration]
 */


/**
 * Events that are bound to applications.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ApplicationEvent
 *
 */


/**
 * The Application API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ApplicationRequest
 *
 * @property {    Application} [application]
 * @property {    ApplicationRole} [role]
 * @property {    Array
<    string>} [webhookIds]
 */


/**
 * The Application API response.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ApplicationResponse
 *
 * @property {    Application} [application]
 * @property {    Array
<    Application>} [applications]
 * @property {    ApplicationRole} [role]
 */


/**
 * A role given to a user for a specific application.
 *
 * @author Seth Musselman
 *
 * @typedef {Object} ApplicationRole
 *
 * @property {    string} [applicationId]
 * @property {    string} [description]
 * @property {    string} [display]
 * @property {    string} [id]
 * @property {    boolean} [isDefault]
 * @property {    boolean} [isSuperRole]
 * @property {    string} [name]
 */


/**
 * This class is a simple attachment with a byte array, name and MIME type.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Attachment
 *
 * @property {    Array
<    number>} [attachment]
 * @property {    string} [mime]
 * @property {    string} [name]
 */


/**
 * An audit log.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} AuditLog
 *
 * @property {    Object
<    string,     Object>} [data]
 * @property {    number} [id]
 * @property {    number} [insertInstant]
 * @property {    string} [insertUser]
 * @property {    string} [message]
 * @property {    Object} [newValue]
 * @property {    Object} [oldValue]
 * @property {    string} [reason]
 */


/**
 * @typedef {Object} AuditLogConfiguration
 *
 * @property {    DeleteConfiguration} [delete]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} AuditLogExportRequest
 * @extends     BaseExportRequest
 *
 * @property {    AuditLogSearchCriteria} [criteria]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} AuditLogRequest
 *
 * @property {    AuditLog} [auditLog]
 */


/**
 * Audit log response.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} AuditLogResponse
 *
 * @property {    AuditLog} [auditLog]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} AuditLogSearchCriteria
 * @extends     BaseSearchCriteria
 *
 * @property {    number} [end]
 * @property {    string} [message]
 * @property {    number} [start]
 * @property {    string} [user]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} AuditLogSearchRequest
 *
 * @property {    AuditLogSearchCriteria} [search]
 */


/**
 * Audit log response.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} AuditLogSearchResponse
 *
 * @property {    Array
<    AuditLog>} [auditLogs]
 * @property {    number} [total]
 */


/**
 * @typedef {Object} AuthenticationTokenConfiguration
 * @extends     Enableable
 *
 */


/**
 * Base-class for all FusionAuth events.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} BaseEvent
 *
 * @property {    number} [createInstant]
 * @property {    string} [id]
 * @property {    string} [tenantId]
 * @property {    EventType} [type]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} BaseExportRequest
 *
 * @property {    string} [dateTimeSecondsFormat]
 * @property {    string} [zoneId]
 */


/**

 *
 * @typedef {Object} BaseIdentityProvider
 * @template {D}
 * @extends     Enableable
 *
 * @property {    Object
<    string,     D>} [applicationConfiguration]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    boolean} [debug]
 * @property {    string} [id]
 * @property {    string} [name]
 * @property {    IdentityProviderType} [type]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} BaseIdentityProviderApplicationConfiguration
 * @extends     Enableable
 *
 * @property {    boolean} [createRegistration]
 * @property {    Object
<    string,     Object>} [data]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} BaseLoginRequest
 *
 * @property {    string} [applicationId]
 * @property {    string} [ipAddress]
 * @property {    MetaData} [metaData]
 * @property {    boolean} [noJWT]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} BaseSearchCriteria
 *
 * @property {    number} [numberOfResults]
 * @property {    string} [orderBy]
 * @property {    number} [startRow]
 */


/**
 * @readonly
 * @enum
 */
var CanonicalizationMethod = {
  exclusive: "exclusive",
  exclusive_with_comments: "exclusive_with_comments",
  inclusive: "inclusive",
  inclusive_with_comments: "inclusive_with_comments"
};

/**
 * @typedef {Object} CertificateInformation
 *
 * @property {    string} [issuer]
 * @property {    string} [md5Fingerprint]
 * @property {    string} [serialNumber]
 * @property {    string} [sha1Fingerprint]
 * @property {    string} [sha1Thumbprint]
 * @property {    string} [sha256Fingerprint]
 * @property {    string} [sha256Thumbprint]
 * @property {    string} [subject]
 * @property {    number} [validFrom]
 * @property {    number} [validTo]
 */


/**
 * Change password request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ChangePasswordRequest
 *
 * @property {    string} [currentPassword]
 * @property {    string} [loginId]
 * @property {    string} [password]
 * @property {    string} [refreshToken]
 */


/**
 * Change password response object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} ChangePasswordResponse
 *
 * @property {    string} [oneTimePassword]
 * @property {    Object
<    string,     Object>} [state]
 */


/**
 * CleanSpeak configuration at the system and application level.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} CleanSpeakConfiguration
 * @extends     Enableable
 *
 * @property {    string} [apiKey]
 * @property {    Array
<    string>} [applicationIds]
 * @property {    string} [url]
 * @property {    UsernameModeration} [usernameModeration]
 */


/**
 * Models a consent.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} Consent
 *
 * @property {    string} [consentEmailTemplateId]
 * @property {    LocalizedIntegers} [countryMinimumAgeForSelfConsent]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    number} [defaultMinimumAgeForSelfConsent]
 * @property {    EmailPlus} [emailPlus]
 * @property {    string} [id]
 * @property {    boolean} [multipleValuesAllowed]
 * @property {    string} [name]
 * @property {    Array
<    string>} [values]
 */


/**
 * API request for User consent types.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} ConsentRequest
 *
 * @property {    Consent} [consent]
 */


/**
 * API response for consent.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} ConsentResponse
 *
 * @property {    Consent} [consent]
 * @property {    Array
<    Consent>} [consents]
 */


/**
 * Models a consent.
 *
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var ConsentStatus = {
  Active: "Active",
  Revoked: "Revoked"
};

/**
 * Status for content like usernames, profile attributes, etc.
 *
 * @author Brian Pontarelli
 *
 * @readonly
 * @enum
 */
var ContentStatus = {
  ACTIVE: "ACTIVE",
  PENDING: "PENDING",
  REJECTED: "REJECTED"
};

/**
 * @typedef {Object} CORSConfiguration
 * @extends     Enableable
 *
 * @property {    boolean} [allowCredentials]
 * @property {    Array
<    string>} [allowedHeaders]
 * @property {    Array
<    HTTPMethod>} [allowedMethods]
 * @property {    Array
<    string>} [allowedOrigins]
 * @property {    Array
<    string>} [exposedHeaders]
 * @property {    number} [preflightMaxAgeInSeconds]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} Count
 *
 * @property {    number} [count]
 * @property {    number} [interval]
 */


/**
 * Response for the daily active user report.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} DailyActiveUserReportResponse
 *
 * @property {    Array
<    Count>} [dailyActiveUsers]
 * @property {    number} [total]
 */


/**
 * @typedef {Object} DeleteConfiguration
 * @extends     Enableable
 *
 * @property {    number} [numberOfDaysToRetain]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} DeviceInfo
 *
 * @property {    string} [description]
 * @property {    string} [lastAccessedAddress]
 * @property {    number} [lastAccessedInstant]
 * @property {    string} [name]
 * @property {    DeviceType} [type]
 */


/**
 * @readonly
 * @enum
 */
var DeviceType = {
  BROWSER: "BROWSER",
  DESKTOP: "DESKTOP",
  LAPTOP: "LAPTOP",
  MOBILE: "MOBILE",
  OTHER: "OTHER",
  SERVER: "SERVER",
  TABLET: "TABLET",
  TV: "TV",
  UNKNOWN: "UNKNOWN"
};

/**
 * A displayable raw login that includes application name and user loginId.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} DisplayableRawLogin
 * @extends     RawLogin
 *
 * @property {    string} [applicationName]
 * @property {    string} [loginId]
 */


/**
 * Interface for all identity providers that can be domain based.
 *
 * @typedef {Object} DomainBasedIdentityProvider
 *
 */


/**
 * This class is an abstraction of a simple email message.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Email
 *
 * @property {    Array
<    Attachment>} [attachments]
 * @property {    Array
<    EmailAddress>} [bcc]
 * @property {    Array
<    EmailAddress>} [cc]
 * @property {    EmailAddress} [from]
 * @property {    string} [html]
 * @property {    EmailAddress} [replyTo]
 * @property {    string} [subject]
 * @property {    string} [text]
 * @property {    Array
<    EmailAddress>} [to]
 */


/**
 * An email address.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EmailAddress
 *
 * @property {    string} [address]
 * @property {    string} [display]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} EmailConfiguration
 *
 * @property {    string} [forgotPasswordEmailTemplateId]
 * @property {    string} [host]
 * @property {    string} [password]
 * @property {    string} [passwordlessEmailTemplateId]
 * @property {    number} [port]
 * @property {    string} [properties]
 * @property {    EmailSecurityType} [security]
 * @property {    string} [setPasswordEmailTemplateId]
 * @property {    string} [username]
 * @property {    string} [verificationEmailTemplateId]
 * @property {    boolean} [verifyEmail]
 * @property {    boolean} [verifyEmailWhenChanged]
 */


/**
 * @typedef {Object} EmailPlus
 * @extends     Enableable
 *
 * @property {    string} [emailTemplateId]
 * @property {    number} [maximumTimeToSendEmailInHours]
 * @property {    number} [minimumTimeToSendEmailInHours]
 */


/**
 * @readonly
 * @enum
 */
var EmailSecurityType = {
  NONE: "NONE",
  SSL: "SSL",
  TLS: "TLS"
};

/**
 * Stores an email template used to send emails to users.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EmailTemplate
 *
 * @property {    string} [defaultFromName]
 * @property {    string} [defaultHtmlTemplate]
 * @property {    string} [defaultSubject]
 * @property {    string} [defaultTextTemplate]
 * @property {    string} [fromEmail]
 * @property {    string} [id]
 * @property {    Object
<    string>} [localizations]
 * @property {    LocalizedStrings} [localizedFromNames]
 * @property {    LocalizedStrings} [localizedHtmlTemplates]
 * @property {    LocalizedStrings} [localizedSubjects]
 * @property {    LocalizedStrings} [localizedTextTemplates]
 * @property {    string} [name]
 */


/**
 * @typedef {Object} EmailTemplateErrors
 *
 * @property {    Object
<    string,     string>} [parseErrors]
 * @property {    Object
<    string,     string>} [renderErrors]
 */


/**
 * Email template request.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EmailTemplateRequest
 *
 * @property {    EmailTemplate} [emailTemplate]
 */


/**
 * Email template response.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EmailTemplateResponse
 *
 * @property {    EmailTemplate} [emailTemplate]
 * @property {    Array
<    EmailTemplate>} [emailTemplates]
 */


/**
 * Something that can be enabled and thus also disabled.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} Enableable
 *
 * @property {    boolean} [enabled]
 */


/**
 * Defines an error.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Error
 *
 * @property {    string} [code]
 * @property {    string} [message]
 * @property {    Array
<    Object>} [values]
 */


/**
 * Standard error domain object that can also be used as the response from an API call.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Errors
 *
 * @property {    Object
<    string,     Array
<    Error>>} [fieldErrors]
 * @property {    Array
<    Error>} [generalErrors]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} EventConfiguration
 *
 * @property {    Object
<    EventType,     EventConfigurationData>} [events]
 */


/**
 * @typedef {Object} EventConfigurationData
 * @extends     Enableable
 *
 * @property {    TransactionType} [transactionType]
 */


/**
 * Event log used internally by FusionAuth to help developers debug hooks, Webhooks, email templates, etc.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EventLog
 *
 * @property {    number} [id]
 * @property {    number} [insertInstant]
 * @property {    string} [message]
 * @property {    EventLogType} [type]
 */


/**
 * @typedef {Object} EventLogConfiguration
 *
 * @property {    number} [numberToRetain]
 */


/**
 * Event log response.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} EventLogResponse
 *
 * @property {    EventLog} [eventLog]
 */


/**
 * Search criteria for the event log.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EventLogSearchCriteria
 * @extends     BaseSearchCriteria
 *
 * @property {    number} [end]
 * @property {    string} [message]
 * @property {    number} [start]
 * @property {    EventLogType} [type]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} EventLogSearchRequest
 *
 * @property {    EventLogSearchCriteria} [search]
 */


/**
 * Event log response.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EventLogSearchResponse
 *
 * @property {    Array
<    EventLog>} [eventLogs]
 * @property {    number} [total]
 */


/**
 * Event Log Type
 *
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var EventLogType = {
  Information: "Information",
  Debug: "Debug",
  Error: "Error"
};

/**
 * Container for the event information. This is the JSON that is sent from FusionAuth to webhooks.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} EventRequest
 *
 * @property {    BaseEvent} [event]
 */


/**
 * Models the event types that FusionAuth produces.
 *
 * @author Brian Pontarelli
 *
 * @readonly
 * @enum
 */
var EventType = {
  UserDelete: "UserDelete",
  UserCreate: "UserCreate",
  UserUpdate: "UserUpdate",
  UserDeactivate: "UserDeactivate",
  UserBulkCreate: "UserBulkCreate",
  UserReactivate: "UserReactivate",
  UserAction: "UserAction",
  JWTRefreshTokenRevoke: "JWTRefreshTokenRevoke",
  JWTPublicKeyUpdate: "JWTPublicKeyUpdate",
  UserLoginSuccess: "UserLoginSuccess",
  UserLoginFailed: "UserLoginFailed",
  UserRegistrationCreate: "UserRegistrationCreate",
  UserRegistrationUpdate: "UserRegistrationUpdate",
  UserRegistrationDelete: "UserRegistrationDelete",
  UserRegistrationVerified: "UserRegistrationVerified",
  UserEmailVerified: "UserEmailVerified",
  Test: "Test"
};

/**
 * @author Brian Pontarelli
 *
 * @readonly
 * @enum
 */
var ExpiryUnit = {
  MINUTES: "MINUTES",
  HOURS: "HOURS",
  DAYS: "DAYS",
  WEEKS: "WEEKS",
  MONTHS: "MONTHS",
  YEARS: "YEARS"
};

/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} ExternalIdentifierConfiguration
 *
 * @property {    number} [authorizationGrantIdTimeToLiveInSeconds]
 * @property {    SecureGeneratorConfiguration} [changePasswordIdGenerator]
 * @property {    number} [changePasswordIdTimeToLiveInSeconds]
 * @property {    SecureGeneratorConfiguration} [emailVerificationIdGenerator]
 * @property {    number} [emailVerificationIdTimeToLiveInSeconds]
 * @property {    number} [oneTimePasswordTimeToLiveInSeconds]
 * @property {    SecureGeneratorConfiguration} [passwordlessLoginGenerator]
 * @property {    number} [passwordlessLoginTimeToLiveInSeconds]
 * @property {    SecureGeneratorConfiguration} [registrationVerificationIdGenerator]
 * @property {    number} [registrationVerificationIdTimeToLiveInSeconds]
 * @property {    SecureGeneratorConfiguration} [setupPasswordIdGenerator]
 * @property {    number} [setupPasswordIdTimeToLiveInSeconds]
 * @property {    number} [twoFactorIdTimeToLiveInSeconds]
 * @property {    number} [twoFactorTrustIdTimeToLiveInSeconds]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} ExternalJWTApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 */


/**
 * External JWT-only identity provider.
 *
 * @author Daniel DeGroff and Brian Pontarelli
 *
 * @typedef {Object} ExternalJWTIdentityProvider
 * @extends     BaseIdentityProvider
<    ExternalJWTApplicationConfiguration>
 *
 * @property {    Object
<    string,     string>} [claimMap]
 * @property {    Object
<    string>} [domains]
 * @property {    string} [headerKeyParameter]
 * @property {    Object
<    string,     string>} [keys]
 * @property {    IdentityProviderOauth2Configuration} [oauth2]
 * @property {    IdentityProviderType} [type]
 * @property {    string} [uniqueIdentityClaim]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} FacebookApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 * @property {    string} [appId]
 * @property {    string} [buttonText]
 * @property {    string} [client_secret]
 * @property {    string} [fields]
 * @property {    string} [permissions]
 */


/**
 * Facebook social login provider.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} FacebookIdentityProvider
 * @extends     BaseIdentityProvider
<    FacebookApplicationConfiguration>
 *
 * @property {    string} [appId]
 * @property {    string} [buttonText]
 * @property {    string} [client_secret]
 * @property {    string} [fields]
 * @property {    string} [permissions]
 * @property {    IdentityProviderType} [type]
 */


/**
 * Configuration for the behavior of failed login attempts. This helps us protect against brute force password attacks.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} FailedAuthenticationConfiguration
 *
 * @property {    number} [actionDuration]
 * @property {    ExpiryUnit} [actionDurationUnit]
 * @property {    number} [resetCountInSeconds]
 * @property {    number} [tooManyAttempts]
 * @property {    string} [userActionId]
 */


/**
 * Models a family grouping of users.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Family
 *
 * @property {    string} [id]
 * @property {    Array
<    FamilyMember>} [members]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} FamilyConfiguration
 * @extends     Enableable
 *
 * @property {    boolean} [allowChildRegistrations]
 * @property {    string} [confirmChildEmailTemplateId]
 * @property {    boolean} [deleteOrphanedAccounts]
 * @property {    number} [deleteOrphanedAccountsDays]
 * @property {    string} [familyRequestEmailTemplateId]
 * @property {    number} [maximumChildAge]
 * @property {    number} [minimumOwnerAge]
 * @property {    boolean} [parentEmailRequired]
 * @property {    string} [parentRegistrationEmailTemplateId]
 */


/**
 * @typedef {Object} FamilyConfiguration
 * @extends     Enableable
 *
 * @property {    boolean} [allowChildRegistrations]
 * @property {    string} [confirmChildEmailTemplateId]
 * @property {    boolean} [deleteOrphanedAccounts]
 * @property {    number} [deleteOrphanedAccountsDays]
 * @property {    string} [familyRequestEmailTemplateId]
 * @property {    number} [maximumChildAge]
 * @property {    number} [minimumOwnerAge]
 * @property {    boolean} [parentEmailRequired]
 * @property {    string} [parentRegistrationEmailTemplateId]
 */


/**
 * API request for sending out family requests to parent's.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} FamilyEmailRequest
 *
 * @property {    string} [parentEmail]
 */


/**
 * Models a single family member.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} FamilyMember
 *
 * @property {    Object
<    string,     Object>} [data]
 * @property {    number} [insertInstant]
 * @property {    boolean} [owner]
 * @property {    FamilyRole} [role]
 * @property {    string} [userId]
 */


/**
 * API request for managing families and members.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} FamilyRequest
 *
 * @property {    FamilyMember} [familyMember]
 */


/**
 * API response for managing families and members.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} FamilyResponse
 *
 * @property {    Array
<    Family>} [families]
 * @property {    Family} [family]
 */


/**
 * @readonly
 * @enum
 */
var FamilyRole = {
  Child: "Child",
  Teen: "Teen",
  Adult: "Adult"
};

/**
 * Forgot password request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ForgotPasswordRequest
 *
 * @property {    string} [changePasswordId]
 * @property {    string} [email]
 * @property {    string} [loginId]
 * @property {    boolean} [sendForgotPasswordEmail]
 * @property {    Object
<    string,     Object>} [state]
 * @property {    string} [username]
 */


/**
 * Forgot password response object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} ForgotPasswordResponse
 *
 * @property {    string} [changePasswordId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} GoogleApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 * @property {    string} [buttonText]
 * @property {    string} [client_id]
 * @property {    string} [client_secret]
 * @property {    string} [scope]
 */


/**
 * Google social login provider.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} GoogleIdentityProvider
 * @extends     BaseIdentityProvider
<    GoogleApplicationConfiguration>
 *
 * @property {    string} [buttonText]
 * @property {    string} [client_id]
 * @property {    string} [client_secret]
 * @property {    string} [scope]
 * @property {    IdentityProviderType} [type]
 */


/**
 * Authorization Grant types as defined by the <a href="https://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization
 * Framework - RFC 6749</a>.
 * <p>
 * Specific names as defined by <a href="https://tools.ietf.org/html/rfc7591#section-4.1">
 * OAuth 2.0 Dynamic Client Registration Protocol - RFC 7591 Section 4.1</a>
 *
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var GrantType = {
  authorization_code: "authorization_code",
  implicit: "implicit",
  password: "password",
  client_credentials: "client_credentials",
  refresh_token: "refresh_token",
  unknown: "unknown"
};

/**
 * @author Tyler Scott
 *
 * @typedef {Object} Group
 *
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [id]
 * @property {    string} [name]
 * @property {    Object
<    string,     Array
<    ApplicationRole>>} [roles]
 * @property {    string} [tenantId]
 */


/**
 * A User's membership into a Group
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} GroupMember
 *
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [groupId]
 * @property {    string} [id]
 * @property {    number} [insertInstant]
 * @property {    string} [userId]
 */


/**
 * Group API request object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} GroupRequest
 *
 * @property {    Group} [group]
 * @property {    Array
<    string>} [roleIds]
 */


/**
 * Group API response object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} GroupResponse
 *
 * @property {    Group} [group]
 * @property {    Array
<    Group>} [groups]
 */


/**
 * @typedef {Object} HistoryItem
 *
 * @property {    string} [actionerUserId]
 * @property {    string} [comment]
 * @property {    number} [createInstant]
 * @property {    number} [expiry]
 */


/**
 * Type for webhook headers.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} HTTPHeaders
 * @extends     Object
<    string,     string>
 *
 */


/**
 * @readonly
 * @enum
 */
var HTTPMethod = {
  GET: "GET",
  POST: "POST",
  PUT: "PUT",
  DELETE: "DELETE",
  HEAD: "HEAD",
  OPTIONS: "OPTIONS"
};

/**
 * Login API request object used for login to third-party systems (i.e. Login with Facebook).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} IdentityProviderLoginRequest
 * @extends     BaseLoginRequest
 *
 * @property {    Object
<    string,     string>} [data]
 * @property {    string} [encodedJWT]
 * @property {    string} [identityProviderId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} IdentityProviderOauth2Configuration
 *
 * @property {    string} [authorization_endpoint]
 * @property {    string} [client_id]
 * @property {    string} [client_secret]
 * @property {    string} [issuer]
 * @property {    string} [scope]
 * @property {    string} [token_endpoint]
 * @property {    string} [userinfo_endpoint]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} IdentityProviderRequest
 *
 * @property {    BaseIdentityProvider
<    Object>} [identityProvider]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} IdentityProviderResponse
 *
 * @property {    BaseIdentityProvider
<    Object>} [identityProvider]
 * @property {    Array
<    BaseIdentityProvider
<    Object>>} [identityProviders]
 */


/**
 * @readonly
 * @enum
 */
var IdentityProviderType = {
  ExternalJWT: "ExternalJWT",
  OpenIDConnect: "OpenIDConnect",
  Facebook: "Facebook",
  Google: "Google",
  Twitter: "Twitter",
  SAMLv2: "SAMLv2"
};

/**
 * Import request.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} ImportRequest
 *
 * @property {    string} [encryptionScheme]
 * @property {    number} [factor]
 * @property {    Array
<    User>} [users]
 * @property {    boolean} [validateDbConstraints]
 */


/**
 * The Integration Request
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} IntegrationRequest
 *
 * @property {    Integrations} [integrations]
 */


/**
 * The Integration Response
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} IntegrationResponse
 *
 * @property {    Integrations} [integrations]
 */


/**
 * Available Integrations
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} Integrations
 *
 * @property {    CleanSpeakConfiguration} [cleanspeak]
 * @property {    KafkaConfiguration} [kafka]
 * @property {    TwilioConfiguration} [twilio]
 */


/**
 * Counts for a period.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} IntervalCount
 *
 * @property {    string} [applicationId]
 * @property {    number} [count]
 * @property {    number} [decrementedCount]
 * @property {    number} [period]
 */


/**
 * A user over an period (for daily and monthly active user calculations).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} IntervalUser
 *
 * @property {    string} [applicationId]
 * @property {    number} [period]
 * @property {    string} [userId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} IntrospectResponse
 * @extends     Object
<    string,     Object>
 *
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} IssueResponse
 *
 * @property {    string} [refreshToken]
 * @property {    string} [token]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} JWKSResponse
 *
 * @property {    Array
<    Object>} [keys]
 */


/**
 * JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration
 * may be <code>enabled = false</code>.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} JWTConfiguration
 * @extends     Enableable
 *
 * @property {    string} [accessTokenKeyId]
 * @property {    string} [idTokenKeyId]
 * @property {    number} [refreshTokenTimeToLiveInMinutes]
 * @property {    number} [timeToLiveInSeconds]
 */


/**
 * Models the JWT public key Refresh Token Revoke Event (and can be converted to JSON). This event might be for a single
 * token, a user or an entire application.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} JWTPublicKeyUpdateEvent
 * @extends     BaseEvent
 *
 * @property {    Object
<    string>} [applicationIds]
 * @property {    EventType} [type]
 */


/**
 * Models the Refresh Token Revoke Event (and can be converted to JSON). This event might be for a single token, a user
 * or an entire application.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} JWTRefreshTokenRevokeEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    Object
<    string,     number>} [applicationTimeToLiveInSeconds]
 * @property {    EventType} [type]
 * @property {    User} [user]
 * @property {    string} [userId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} KafkaConfiguration
 * @extends     Enableable
 *
 * @property {    string} [defaultTopic]
 * @property {    Object
<    string,     string>} [producer]
 */


/**
 * Domain for a public key, key pair or an HMAC secret. This is used by KeyMaster to manage keys for JWTs, SAML, etc.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Key
 *
 * @property {    KeyAlgorithm} [algorithm]
 * @property {    string} [certificate]
 * @property {    CertificateInformation} [certificateInformation]
 * @property {    string} [displayName]
 * @property {    number} [expirationInstant]
 * @property {    string} [id]
 * @property {    number} [insertInstant]
 * @property {    string} [issuer]
 * @property {    string} [kid]
 * @property {    number} [length]
 * @property {    string} [name]
 * @property {    boolean} [pair]
 * @property {    string} [privateKey]
 * @property {    string} [publicKey]
 * @property {    string} [secret]
 * @property {    KeyType} [type]
 */


/**
 * @readonly
 * @enum
 */
var KeyAlgorithm = {
  ES256: "ES256",
  ES384: "ES384",
  ES512: "ES512",
  HS256: "HS256",
  HS384: "HS384",
  HS512: "HS512",
  RS256: "RS256",
  RS384: "RS384",
  RS512: "RS512"
};

/**
 * Key API request object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} KeyRequest
 *
 * @property {    Key} [key]
 */


/**
 * Key API response object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} KeyResponse
 *
 * @property {    Key} [key]
 * @property {    Array
<    Key>} [keys]
 */


/**
 * @readonly
 * @enum
 */
var KeyType = {
  EC: "EC",
  RSA: "RSA",
  HMAC: "HMAC"
};

/**
 * A JavaScript lambda function that is executed during certain events inside FusionAuth.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Lambda
 * @extends     Enableable
 *
 * @property {    string} [body]
 * @property {    boolean} [debug]
 * @property {    string} [id]
 * @property {    number} [insertInstant]
 * @property {    string} [name]
 * @property {    LambdaType} [type]
 */


/**
 * @typedef {Object} LambdaConfiguration
 *
 * @property {    string} [accessTokenPopulateId]
 * @property {    string} [idTokenPopulateId]
 * @property {    string} [samlv2PopulateId]
 */


/**
 * @typedef {Object} LambdaConfiguration
 *
 * @property {    string} [reconcileId]
 */


/**
 * Lambda API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} LambdaRequest
 *
 * @property {    Lambda} [lambda]
 */


/**
 * Lambda API response object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} LambdaResponse
 *
 * @property {    Lambda} [lambda]
 * @property {    Array
<    Lambda>} [lambdas]
 */


/**
 * The types of lambdas that indicate how they are invoked by FusionAuth.
 *
 * @author Brian Pontarelli
 *
 * @readonly
 * @enum
 */
var LambdaType = {
  JWTPopulate: "JWTPopulate",
  OpenIDReconcile: "OpenIDReconcile",
  SAMLv2Reconcile: "SAMLv2Reconcile",
  SAMLv2Populate: "SAMLv2Populate"
};

/**
 * Models a set of localized Integers that can be stored as JSON.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} LocalizedIntegers
 * @extends     Object
<    string,     number>
 *
 */


/**
 * Models a set of localized Strings that can be stored as JSON.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} LocalizedStrings
 * @extends     Object
<    string,     string>
 *
 */


/**
 * A historical state of a user log event. Since events can be modified, this stores the historical state.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} LogHistory
 *
 * @property {    Array
<    HistoryItem>} [historyItems]
 */


/**
 * @typedef {Object} LoginConfiguration
 *
 * @property {    boolean} [allowTokenRefresh]
 * @property {    boolean} [generateRefreshTokens]
 * @property {    boolean} [requireAuthentication]
 */


/**
 * @readonly
 * @enum
 */
var LoginIdType = {
  email: "email",
  username: "username"
};

/**
 * The summary of the action that is preventing login to be returned on the login response.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} LoginPreventedResponse
 *
 * @property {    string} [actionerUserId]
 * @property {    string} [actionId]
 * @property {    number} [expiry]
 * @property {    string} [localizedName]
 * @property {    string} [localizedOption]
 * @property {    string} [localizedReason]
 * @property {    string} [name]
 * @property {    string} [option]
 * @property {    string} [reason]
 * @property {    string} [reasonCode]
 */


/**
 * @typedef {Object} LoginRecordConfiguration
 *
 * @property {    DeleteConfiguration} [delete]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} LoginRecordExportRequest
 * @extends     BaseExportRequest
 *
 * @property {    LoginRecordSearchCriteria} [criteria]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} LoginRecordSearchCriteria
 * @extends     BaseSearchCriteria
 *
 * @property {    string} [applicationId]
 * @property {    number} [end]
 * @property {    number} [start]
 * @property {    string} [userId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} LoginRecordSearchRequest
 *
 * @property {    boolean} [retrieveTotal]
 * @property {    LoginRecordSearchCriteria} [search]
 */


/**
 * A raw login record response
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} LoginRecordSearchResponse
 *
 * @property {    Array
<    DisplayableRawLogin>} [logins]
 * @property {    number} [total]
 */


/**
 * Response for the login report.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} LoginReportResponse
 *
 * @property {    Array
<    Count>} [hourlyCounts]
 * @property {    number} [total]
 */


/**
 * Login API request object.
 *
 * @author Seth Musselman
 *
 * @typedef {Object} LoginRequest
 * @extends     BaseLoginRequest
 *
 * @property {    string} [loginId]
 * @property {    string} [oneTimePassword]
 * @property {    string} [password]
 * @property {    string} [twoFactorTrustId]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} LoginResponse
 *
 * @property {    Array
<    LoginPreventedResponse>} [actions]
 * @property {    string} [changePasswordId]
 * @property {    string} [refreshToken]
 * @property {    Object
<    string,     Object>} [state]
 * @property {    string} [token]
 * @property {    string} [twoFactorId]
 * @property {    string} [twoFactorTrustId]
 * @property {    User} [user]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} LookupResponse
 *
 * @property {    BaseIdentityProvider
<    Object>} [identityProvider]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} MaximumPasswordAge
 * @extends     Enableable
 *
 * @property {    number} [days]
 */


/**
 * Group Member Delete Request
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} MemberDeleteRequest
 *
 * @property {    Array
<    string>} [memberIds]
 * @property {    Object
<    string,     Array
<    string>>} [members]
 */


/**
 * Group Member Request
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} MemberRequest
 *
 * @property {    Object
<    string,     Array
<    GroupMember>>} [members]
 */


/**
 * Group Member Response
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} MemberResponse
 *
 * @property {    Object
<    string,     Array
<    GroupMember>>} [members]
 */


/**
 * @typedef {Object} MetaData
 *
 * @property {    DeviceInfo} [device]
 * @property {    Object
<    string>} [scopes]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} MinimumPasswordAge
 * @extends     Enableable
 *
 * @property {    number} [seconds]
 */


/**
 * Response for the daily active user report.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} MonthlyActiveUserReportResponse
 *
 * @property {    Array
<    Count>} [monthlyActiveUsers]
 * @property {    number} [total]
 */


/**
 * Helper methods for normalizing values.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Normalizer
 *
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} OAuth2Configuration
 *
 * @property {    Array
<    string>} [authorizedOriginURLs]
 * @property {    Array
<    string>} [authorizedRedirectURLs]
 * @property {    string} [clientId]
 * @property {    string} [clientSecret]
 * @property {    Object
<    GrantType>} [enabledGrants]
 * @property {    boolean} [generateRefreshTokens]
 * @property {    string} [logoutURL]
 * @property {    boolean} [requireClientAuthentication]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} OAuthConfigurationResponse
 *
 * @property {    number} [httpSessionMaxInactiveInterval]
 * @property {    string} [logoutURL]
 * @property {    OAuth2Configuration} [oauthConfiguration]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} OAuthError
 *
 * @property {    string} [change_password_id]
 * @property {    OAuthErrorType} [error]
 * @property {    string} [error_description]
 * @property {    OAuthErrorReason} [error_reason]
 * @property {    string} [error_uri]
 * @property {    string} [two_factor_id]
 */


/**
 * @readonly
 * @enum
 */
var OAuthErrorReason = {
  auth_code_not_found: "auth_code_not_found",
  access_token_malformed: "access_token_malformed",
  access_token_expired: "access_token_expired",
  access_token_unavailable_for_processing: "access_token_unavailable_for_processing",
  access_token_failed_processing: "access_token_failed_processing",
  refresh_token_not_found: "refresh_token_not_found",
  invalid_client_id: "invalid_client_id",
  invalid_user_credentials: "invalid_user_credentials",
  invalid_grant_type: "invalid_grant_type",
  invalid_origin: "invalid_origin",
  invalid_pkce_code_verifier: "invalid_pkce_code_verifier",
  invalid_pkce_code_challenge: "invalid_pkce_code_challenge",
  invalid_pkce_code_challenge_method: "invalid_pkce_code_challenge_method",
  invalid_redirect_uri: "invalid_redirect_uri",
  invalid_response_type: "invalid_response_type",
  invalid_id_token_hint: "invalid_id_token_hint",
  invalid_post_logout_redirect_uri: "invalid_post_logout_redirect_uri",
  grant_type_disabled: "grant_type_disabled",
  missing_client_id: "missing_client_id",
  missing_code: "missing_code",
  missing_grant_type: "missing_grant_type",
  missing_redirect_uri: "missing_redirect_uri",
  missing_refresh_token: "missing_refresh_token",
  missing_response_type: "missing_response_type",
  missing_token: "missing_token",
  login_prevented: "login_prevented",
  user_expired: "user_expired",
  user_locked: "user_locked",
  user_not_found: "user_not_found",
  client_authentication_missing: "client_authentication_missing",
  invalid_client_authentication_scheme: "invalid_client_authentication_scheme",
  invalid_client_authentication: "invalid_client_authentication",
  client_id_mismatch: "client_id_mismatch",
  unknown: "unknown"
};

/**
 * @readonly
 * @enum
 */
var OAuthErrorType = {
  invalid_request: "invalid_request",
  invalid_client: "invalid_client",
  invalid_grant: "invalid_grant",
  invalid_token: "invalid_token",
  unauthorized_client: "unauthorized_client",
  invalid_scope: "invalid_scope",
  server_error: "server_error",
  unsupported_grant_type: "unsupported_grant_type",
  unsupported_response_type: "unsupported_response_type",
  change_password_required: "change_password_required",
  two_factor_required: "two_factor_required"
};

/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} OAuthResponse
 *
 */


/**
 * OpenID Configuration as described by the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata">OpenID
 * Provider Metadata</a>.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} OpenIdConfiguration
 *
 * @property {    string} [authorization_endpoint]
 * @property {    boolean} [backchannel_logout_supported]
 * @property {    Array
<    string>} [claims_supported]
 * @property {    string} [end_session_endpoint]
 * @property {    boolean} [frontchannel_logout_supported]
 * @property {    Array
<    string>} [grant_types_supported]
 * @property {    Array
<    string>} [id_token_signing_alg_values_supported]
 * @property {    string} [issuer]
 * @property {    string} [jwks_uri]
 * @property {    Array
<    string>} [response_types_supported]
 * @property {    Array
<    string>} [scopes_supported]
 * @property {    Array
<    string>} [subject_types_supported]
 * @property {    string} [token_endpoint]
 * @property {    Array
<    string>} [token_endpoint_auth_methods_supported]
 * @property {    string} [userinfo_endpoint]
 * @property {    Array
<    string>} [userinfo_signing_alg_values_supported]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} OpenIdConnectApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 * @property {    string} [buttonImageURL]
 * @property {    string} [buttonText]
 * @property {    IdentityProviderOauth2Configuration} [oauth2]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} OpenIdConnectIdentityProvider
 * @extends     BaseIdentityProvider
<    OpenIdConnectApplicationConfiguration>
 *
 * @property {    string} [buttonImageURL]
 * @property {    string} [buttonText]
 * @property {    Object
<    string>} [domains]
 * @property {    LambdaConfiguration} [lambdaConfiguration]
 * @property {    IdentityProviderOauth2Configuration} [oauth2]
 * @property {    IdentityProviderType} [type]
 */


/**
 * Password Encryption Scheme Configuration
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} PasswordEncryptionConfiguration
 *
 * @property {    string} [encryptionScheme]
 * @property {    number} [encryptionSchemeFactor]
 * @property {    boolean} [modifyEncryptionSchemeOnLogin]
 */


/**
 * @typedef {Object} PasswordlessConfiguration
 * @extends     Enableable
 *
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} PasswordlessLoginRequest
 * @extends     BaseLoginRequest
 *
 * @property {    string} [code]
 * @property {    string} [twoFactorTrustId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} PasswordlessSendRequest
 *
 * @property {    string} [applicationId]
 * @property {    string} [loginId]
 * @property {    Object
<    string,     Object>} [state]
 */


/**
 * @author Derek Klatt
 *
 * @typedef {Object} PasswordValidationRules
 *
 * @property {    number} [maxLength]
 * @property {    number} [minLength]
 * @property {    RememberPreviousPasswords} [rememberPreviousPasswords]
 * @property {    boolean} [requireMixedCase]
 * @property {    boolean} [requireNonAlpha]
 * @property {    boolean} [requireNumber]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} PasswordValidationRulesResponse
 *
 * @property {    PasswordValidationRules} [passwordValidationRules]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} PendingResponse
 *
 * @property {    Array
<    User>} [users]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} PreviewRequest
 *
 * @property {    EmailTemplate} [emailTemplate]
 * @property {    string} [locale]
 */


/**
 * @author Seth Musselman
 *
 * @typedef {Object} PreviewResponse
 *
 * @property {    Email} [email]
 * @property {    Errors} [errors]
 */


/**
 * JWT Public Key Response Object
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} PublicKeyResponse
 *
 * @property {    string} [publicKey]
 * @property {    Object
<    string,     string>} [publicKeys]
 */


/**
 * Raw login information for each time a user logs into an application.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} RawLogin
 *
 * @property {    string} [applicationId]
 * @property {    number} [instant]
 * @property {    string} [ipAddress]
 * @property {    string} [userId]
 */


/**
 * Response for the user login report.
 *
 * @author Seth Musselman
 *
 * @typedef {Object} RecentLoginResponse
 *
 * @property {    Array
<    DisplayableRawLogin>} [logins]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} RefreshRequest
 *
 * @property {    string} [refreshToken]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} RefreshResponse
 *
 * @property {    Array
<    RefreshToken>} [refreshTokens]
 * @property {    string} [token]
 */


/**
 * Models a JWT Refresh Token.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} RefreshToken
 *
 * @property {    Application} [application]
 * @property {    string} [applicationId]
 * @property {    number} [insertInstant]
 * @property {    MetaData} [metaData]
 * @property {    number} [startInstant]
 * @property {    string} [token]
 * @property {    string} [userId]
 */


/**
 * @typedef {Object} RegistrationConfiguration
 * @extends     Enableable
 *
 * @property {    Requirable} [birthDate]
 * @property {    boolean} [confirmPassword]
 * @property {    Requirable} [firstName]
 * @property {    Requirable} [fullName]
 * @property {    Requirable} [lastName]
 * @property {    LoginIdType} [loginIdType]
 * @property {    Requirable} [middleName]
 * @property {    Requirable} [mobilePhone]
 */


/**
 * Response for the registration report.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} RegistrationReportResponse
 *
 * @property {    Array
<    Count>} [hourlyCounts]
 * @property {    number} [total]
 */


/**
 * Registration API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} RegistrationRequest
 *
 * @property {    boolean} [generateAuthenticationToken]
 * @property {    UserRegistration} [registration]
 * @property {    boolean} [sendSetPasswordEmail]
 * @property {    boolean} [skipRegistrationVerification]
 * @property {    boolean} [skipVerification]
 * @property {    User} [user]
 */


/**
 * Registration API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} RegistrationResponse
 *
 * @property {    UserRegistration} [registration]
 * @property {    User} [user]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} ReloadRequest
 *
 * @property {    Array
<    string>} [names]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} RememberPreviousPasswords
 * @extends     Enableable
 *
 * @property {    number} [count]
 */


/**
 * Something that can be required and thus also optional. This currently extends Enableable because anything that is
 * require/optional is almost always enableable as well.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Requirable
 * @extends     Enableable
 *
 * @property {    boolean} [required]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} SAML2ApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 * @property {    string} [buttonImageURL]
 * @property {    string} [buttonText]
 */


/**
 * SAML v2 identity provider configuration.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SAML2IdentityProvider
 * @extends     BaseIdentityProvider
<    SAML2ApplicationConfiguration>
 *
 * @property {    string} [buttonImageURL]
 * @property {    string} [buttonText]
 * @property {    Object
<    string,     string>} [claimMap]
 * @property {    Object
<    string>} [domains]
 * @property {    string} [emailClaim]
 * @property {    string} [idpEndpoint]
 * @property {    string} [requestPrivateKey]
 * @property {    string} [requestPublicKey]
 * @property {    string} [responsePublicKey]
 * @property {    string} [rolesClaim]
 * @property {    IdentityProviderType} [type]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} SAMLv2ApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 * @property {    string} [buttonImageURL]
 * @property {    string} [buttonText]
 */


/**
 * @typedef {Object} SAMLv2Configuration
 * @extends     Enableable
 *
 * @property {    string} [audience]
 * @property {    string} [callbackURL]
 * @property {    boolean} [debug]
 * @property {    string} [issuer]
 * @property {    string} [keyId]
 * @property {    string} [logoutURL]
 * @property {    CanonicalizationMethod} [xmlSignatureC14nMethod]
 */


/**
 * SAML v2 identity provider configuration.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SAMLv2IdentityProvider
 * @extends     BaseIdentityProvider
<    SAMLv2ApplicationConfiguration>
 *
 * @property {    string} [buttonImageURL]
 * @property {    string} [buttonText]
 * @property {    Object
<    string>} [domains]
 * @property {    string} [emailClaim]
 * @property {    string} [idpEndpoint]
 * @property {    string} [issuer]
 * @property {    string} [keyId]
 * @property {    LambdaConfiguration} [lambdaConfiguration]
 * @property {    IdentityProviderType} [type]
 * @property {    boolean} [useNameIdForEmail]
 */


/**
 * Search API request.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SearchRequest
 *
 * @property {    UserSearchCriteria} [search]
 */


/**
 * Search API response.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SearchResponse
 *
 * @property {    number} [total]
 * @property {    Array
<    User>} [users]
 */


/**
 * Search results.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SearchResults
 * @template {T}
 *
 * @property {    Array
<    T>} [results]
 * @property {    number} [total]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} SecretResponse
 *
 * @property {    string} [secret]
 * @property {    string} [secretBase32Encoded]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} SecureGeneratorConfiguration
 *
 * @property {    number} [length]
 * @property {    SecureGeneratorType} [type]
 */


/**
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var SecureGeneratorType = {
  randomDigits: "randomDigits",
  randomBytes: "randomBytes"
};

/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} SecureIdentity
 *
 * @property {    string} [encryptionScheme]
 * @property {    number} [factor]
 * @property {    string} [id]
 * @property {    string} [password]
 * @property {    boolean} [passwordChangeRequired]
 * @property {    number} [passwordLastUpdateInstant]
 * @property {    string} [salt]
 * @property {    boolean} [verified]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} SendRequest
 *
 * @property {    Array
<    string>} [bccAddresses]
 * @property {    Array
<    string>} [ccAddresses]
 * @property {    Object
<    string,     Object>} [requestData]
 * @property {    Array
<    string>} [userIds]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} SendResponse
 *
 * @property {    Object
<    string,     EmailTemplateErrors>} [results]
 */


/**
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var Sort = {
  asc: "asc",
  desc: "desc"
};

/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} SortField
 *
 * @property {    string} [missing]
 * @property {    string} [name]
 * @property {    Sort} [order]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} SystemConfiguration
 *
 * @property {    AuditLogConfiguration} [auditLogConfiguration]
 * @property {    string} [cookieEncryptionIV]
 * @property {    string} [cookieEncryptionKey]
 * @property {    CORSConfiguration} [corsConfiguration]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    EventLogConfiguration} [eventLogConfiguration]
 * @property {    LoginRecordConfiguration} [loginRecordConfiguration]
 * @property {    string} [reportTimezone]
 * @property {    UIConfiguration} [uiConfiguration]
 */


/**
 * Request for the system configuration API.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SystemConfigurationRequest
 *
 * @property {    SystemConfiguration} [systemConfiguration]
 */


/**
 * Response for the system configuration API.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} SystemConfigurationResponse
 *
 * @property {    SystemConfiguration} [systemConfiguration]
 */


/**
 * @typedef {Object} Templates
 *
 * @property {    string} [emailComplete]
 * @property {    string} [emailSend]
 * @property {    string} [emailVerify]
 * @property {    string} [helpers]
 * @property {    string} [oauth2Authorize]
 * @property {    string} [oauth2ChildRegistrationNotAllowed]
 * @property {    string} [oauth2ChildRegistrationNotAllowedComplete]
 * @property {    string} [oauth2CompleteRegistration]
 * @property {    string} [oauth2Error]
 * @property {    string} [oauth2Logout]
 * @property {    string} [oauth2Passwordless]
 * @property {    string} [oauth2Register]
 * @property {    string} [oauth2TwoFactor]
 * @property {    string} [passwordChange]
 * @property {    string} [passwordComplete]
 * @property {    string} [passwordForgot]
 * @property {    string} [passwordSent]
 * @property {    string} [registrationComplete]
 * @property {    string} [registrationSend]
 * @property {    string} [registrationVerify]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} Tenant
 *
 * @property {    boolean} [configured]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    EmailConfiguration} [emailConfiguration]
 * @property {    EventConfiguration} [eventConfiguration]
 * @property {    ExternalIdentifierConfiguration} [externalIdentifierConfiguration]
 * @property {    FailedAuthenticationConfiguration} [failedAuthenticationConfiguration]
 * @property {    FamilyConfiguration} [familyConfiguration]
 * @property {    number} [httpSessionMaxInactiveInterval]
 * @property {    string} [id]
 * @property {    string} [issuer]
 * @property {    JWTConfiguration} [jwtConfiguration]
 * @property {    string} [logoutURL]
 * @property {    MaximumPasswordAge} [maximumPasswordAge]
 * @property {    MinimumPasswordAge} [minimumPasswordAge]
 * @property {    string} [name]
 * @property {    PasswordEncryptionConfiguration} [passwordEncryptionConfiguration]
 * @property {    PasswordValidationRules} [passwordValidationRules]
 * @property {    string} [themeId]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} Tenantable
 *
 */


/**
 * @typedef {Object} TenantEmailConfiguration
 * @extends     Enableable
 *
 * @property {    string} [forgotPasswordEmailTemplateId]
 * @property {    string} [passwordlessEmailTemplateId]
 * @property {    string} [setPasswordEmailTemplateId]
 * @property {    string} [verificationEmailTemplateId]
 * @property {    boolean} [verifyEmail]
 * @property {    boolean} [verifyEmailWhenChanged]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} TenantRequest
 *
 * @property {    Tenant} [tenant]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} TenantResponse
 *
 * @property {    Tenant} [tenant]
 * @property {    Array
<    Tenant>} [tenants]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} TestEvent
 * @extends     BaseEvent
 *
 * @property {    string} [message]
 * @property {    EventType} [type]
 */


/**
 * @author Trevor Smith
 *
 * @typedef {Object} Theme
 *
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [defaultMessages]
 * @property {    string} [id]
 * @property {    number} [insertInstant]
 * @property {    number} [lastUpdateInstant]
 * @property {    LocalizedStrings} [localizedMessages]
 * @property {    string} [name]
 * @property {    string} [stylesheet]
 * @property {    Templates} [templates]
 */


/**
 * Theme API request object.
 *
 * @author Trevor Smith
 *
 * @typedef {Object} ThemeRequest
 *
 * @property {    string} [sourceThemeId]
 * @property {    Theme} [theme]
 */


/**
 * Theme API response object.
 *
 * @author Trevor Smith
 *
 * @typedef {Object} ThemeResponse
 *
 * @property {    Theme} [theme]
 * @property {    Array
<    Theme>} [themes]
 */


/**
 * <ul>
 * <li>Bearer Token type as defined by <a href="https://tools.ietf.org/html/rfc6750">RFC 6750</a>.</li>
 * <li>MAC Token type as referenced by <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a> and
 * <a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-05">
 * Draft RFC on OAuth 2.0 Message Authentication Code (MAC) Tokens</a>
 * </li>
 * </ul>
 *
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var TokenType = {
  Bearer: "Bearer",
  MAC: "MAC"
};

/**
 * @typedef {Object} Totals
 *
 * @property {    number} [logins]
 * @property {    number} [registrations]
 * @property {    number} [totalRegistrations]
 */


/**
 * The response from the total report. This report stores the total numbers for each application.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} TotalsReportResponse
 *
 * @property {    Object
<    string,     Totals>} [applicationTotals]
 * @property {    number} [globalRegistrations]
 * @property {    number} [totalGlobalRegistrations]
 */


/**
 * The transaction types for Webhooks and other event systems within FusionAuth.
 *
 * @author Brian Pontarelli
 *
 * @readonly
 * @enum
 */
var TransactionType = {
  None: "None",
  Any: "Any",
  SimpleMajority: "SimpleMajority",
  SuperMajority: "SuperMajority",
  AbsoluteMajority: "AbsoluteMajority"
};

/**
 * Twilio Service Configuration.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} TwilioConfiguration
 * @extends     Enableable
 *
 * @property {    string} [accountSID]
 * @property {    string} [authToken]
 * @property {    string} [fromPhoneNumber]
 * @property {    string} [messagingServiceSid]
 * @property {    string} [url]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} TwitterApplicationConfiguration
 * @extends     BaseIdentityProviderApplicationConfiguration
 *
 * @property {    string} [buttonText]
 * @property {    string} [consumerKey]
 * @property {    string} [consumerSecret]
 */


/**
 * Twitter social login provider.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} TwitterIdentityProvider
 * @extends     BaseIdentityProvider
<    TwitterApplicationConfiguration>
 *
 * @property {    string} [buttonText]
 * @property {    string} [consumerKey]
 * @property {    string} [consumerSecret]
 * @property {    IdentityProviderType} [type]
 */


/**
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var TwoFactorDelivery = {
  None: "None",
  TextMessage: "TextMessage"
};

/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} TwoFactorLoginRequest
 * @extends     BaseLoginRequest
 *
 * @property {    string} [code]
 * @property {    boolean} [trustComputer]
 * @property {    string} [twoFactorId]
 */


/**
 * @author Brian Pontarelli
 *
 * @typedef {Object} TwoFactorRequest
 *
 * @property {    string} [code]
 * @property {    TwoFactorDelivery} [delivery]
 * @property {    string} [secret]
 * @property {    string} [secretBase32Encoded]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} TwoFactorSendRequest
 *
 * @property {    string} [mobilePhone]
 * @property {    string} [secret]
 * @property {    string} [userId]
 */


/**
 * @typedef {Object} UIConfiguration
 *
 * @property {    string} [headerColor]
 * @property {    string} [logoURL]
 * @property {    string} [menuFontColor]
 */


/**
 * The global view of a User. This object contains all global information about the user including birth date, registration information
 * preferred languages, global attributes, etc.
 *
 * @author Seth Musselman
 *
 * @typedef {Object} User
 * @extends     SecureIdentity
 *
 * @property {    boolean} [active]
 * @property {    number} [age]
 * @property {    string} [birthDate]
 * @property {    string} [cleanSpeakId]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [email]
 * @property {    number} [expiry]
 * @property {    string} [firstName]
 * @property {    string} [fullName]
 * @property {    string} [imageUrl]
 * @property {    number} [insertInstant]
 * @property {    number} [lastLoginInstant]
 * @property {    string} [lastName]
 * @property {    string} [login]
 * @property {    Array
<    GroupMember>} [memberships]
 * @property {    string} [middleName]
 * @property {    string} [mobilePhone]
 * @property {    string} [name]
 * @property {    string} [parentEmail]
 * @property {    Array
<    string>} [preferredLanguages]
 * @property {    Array
<    UserRegistration>} [registrations]
 * @property {    string} [tenantId]
 * @property {    string} [timezone]
 * @property {    TwoFactorDelivery} [twoFactorDelivery]
 * @property {    boolean} [twoFactorEnabled]
 * @property {    string} [twoFactorSecret]
 * @property {    string} [username]
 * @property {    ContentStatus} [usernameStatus]
 */


/**
 * An action that can be executed on a user (discipline or reward potentially).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserAction
 *
 * @property {    boolean} [active]
 * @property {    string} [cancelEmailTemplateId]
 * @property {    string} [endEmailTemplateId]
 * @property {    string} [id]
 * @property {    boolean} [includeEmailInEventJSON]
 * @property {    LocalizedStrings} [localizedNames]
 * @property {    string} [modifyEmailTemplateId]
 * @property {    string} [name]
 * @property {    Array
<    UserActionOption>} [options]
 * @property {    boolean} [preventLogin]
 * @property {    boolean} [sendEndEvent]
 * @property {    string} [startEmailTemplateId]
 * @property {    boolean} [temporal]
 * @property {    TransactionType} [transactionType]
 * @property {    boolean} [userEmailingEnabled]
 * @property {    boolean} [userNotificationsEnabled]
 */


/**
 * Models the user action event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionEvent
 * @extends     BaseEvent
 *
 * @property {    string} [action]
 * @property {    string} [actioneeUserId]
 * @property {    string} [actionerUserId]
 * @property {    string} [actionId]
 * @property {    Array
<    string>} [applicationIds]
 * @property {    string} [comment]
 * @property {    Email} [email]
 * @property {    boolean} [emailedUser]
 * @property {    number} [expiry]
 * @property {    string} [localizedAction]
 * @property {    string} [localizedDuration]
 * @property {    string} [localizedOption]
 * @property {    string} [localizedReason]
 * @property {    boolean} [notifyUser]
 * @property {    string} [option]
 * @property {    UserActionPhase} [phase]
 * @property {    string} [reason]
 * @property {    string} [reasonCode]
 * @property {    EventType} [type]
 */


/**
 * A log for an action that was taken on a User.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionLog
 *
 * @property {    string} [actioneeUserId]
 * @property {    string} [actionerUserId]
 * @property {    Array
<    string>} [applicationIds]
 * @property {    string} [comment]
 * @property {    number} [createInstant]
 * @property {    boolean} [emailUserOnEnd]
 * @property {    boolean} [endEventSent]
 * @property {    number} [expiry]
 * @property {    LogHistory} [history]
 * @property {    string} [id]
 * @property {    string} [localizedName]
 * @property {    string} [localizedOption]
 * @property {    string} [localizedReason]
 * @property {    string} [name]
 * @property {    boolean} [notifyUserOnEnd]
 * @property {    string} [option]
 * @property {    string} [reason]
 * @property {    string} [reasonCode]
 * @property {    string} [userActionId]
 */


/**
 * Models content user action options.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionOption
 *
 * @property {    LocalizedStrings} [localizedNames]
 * @property {    string} [name]
 */


/**
 * The phases of a time-based user action.
 *
 * @author Brian Pontarelli
 *
 * @readonly
 * @enum
 */
var UserActionPhase = {
  start: "start",
  modify: "modify",
  cancel: "cancel",
  end: "end"
};

/**
 * Models action reasons.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionReason
 *
 * @property {    string} [code]
 * @property {    string} [id]
 * @property {    LocalizedStrings} [localizedTexts]
 * @property {    string} [text]
 */


/**
 * User Action Reason API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionReasonRequest
 *
 * @property {    UserActionReason} [userActionReason]
 */


/**
 * User Action Reason API response object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionReasonResponse
 *
 * @property {    UserActionReason} [userActionReason]
 * @property {    Array
<    UserActionReason>} [userActionReasons]
 */


/**
 * User Action API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionRequest
 *
 * @property {    UserAction} [userAction]
 */


/**
 * User Action API response object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserActionResponse
 *
 * @property {    UserAction} [userAction]
 * @property {    Array
<    UserAction>} [userActions]
 */


/**
 * Models the User Bulk Create Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserBulkCreateEvent
 * @extends     BaseEvent
 *
 * @property {    EventType} [type]
 * @property {    Array
<    User>} [users]
 */


/**
 * A log for an event that happened to a User.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserComment
 *
 * @property {    string} [comment]
 * @property {    string} [commenterId]
 * @property {    number} [createInstant]
 * @property {    string} [id]
 * @property {    string} [userId]
 */


/**
 * @author Seth Musselman
 *
 * @typedef {Object} UserCommentRequest
 *
 * @property {    UserComment} [userComment]
 */


/**
 * User Comment Response
 *
 * @author Seth Musselman
 *
 * @typedef {Object} UserCommentResponse
 *
 * @property {    UserComment} [userComment]
 * @property {    Array
<    UserComment>} [userComments]
 */


/**
 * Models a User consent.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserConsent
 *
 * @property {    Consent} [consent]
 * @property {    string} [consentId]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [giverUserId]
 * @property {    string} [id]
 * @property {    number} [insertInstant]
 * @property {    number} [lastUpdateInstant]
 * @property {    ConsentStatus} [status]
 * @property {    string} [userId]
 * @property {    Array
<    string>} [values]
 */


/**
 * API response for User consent.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserConsentRequest
 *
 * @property {    UserConsent} [userConsent]
 */


/**
 * API response for User consent.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserConsentResponse
 *
 * @property {    UserConsent} [userConsent]
 * @property {    Array
<    UserConsent>} [userConsents]
 */


/**
 * Models the User Create Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserCreateEvent
 * @extends     BaseEvent
 *
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * Models the User Deactivate Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserDeactivateEvent
 * @extends     BaseEvent
 *
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * Models the User Event (and can be converted to JSON) that is used for all user modifications (create, update,
 * delete).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserDeleteEvent
 * @extends     BaseEvent
 *
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * User API delete request object.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserDeleteRequest
 *
 * @property {    boolean} [hardDelete]
 * @property {    Array
<    string>} [userIds]
 */


/**
 * Models the User Email Verify Event (and can be converted to JSON).
 *
 * @author Trevor Smith
 *
 * @typedef {Object} UserEmailVerifiedEvent
 * @extends     BaseEvent
 *
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserinfoResponse
 * @extends     Object
<    string,     Object>
 *
 */


/**
 * Models the User Login Failed Event.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserLoginFailedEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    string} [authenticationType]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * Models the User Login Success Event.
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserLoginSuccessEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    string} [authenticationType]
 * @property {    string} [identityProviderId]
 * @property {    string} [identityProviderName]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * @typedef {Object} UsernameModeration
 * @extends     Enableable
 *
 * @property {    string} [applicationId]
 */


/**
 * Models the User Reactivate Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserReactivateEvent
 * @extends     BaseEvent
 *
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * User registration information for a single application.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserRegistration
 *
 * @property {    string} [applicationId]
 * @property {    string} [authenticationToken]
 * @property {    string} [cleanSpeakId]
 * @property {    Object
<    string,     Object>} [data]
 * @property {    string} [id]
 * @property {    number} [insertInstant]
 * @property {    number} [lastLoginInstant]
 * @property {    Array
<    string>} [preferredLanguages]
 * @property {    Array
<    string>} [roles]
 * @property {    string} [timezone]
 * @property {    Object
<    string,     string>} [tokens]
 * @property {    string} [username]
 * @property {    ContentStatus} [usernameStatus]
 * @property {    boolean} [verified]
 */


/**
 * Models the User Create Registration Event (and can be converted to JSON).
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserRegistrationCreateEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    UserRegistration} [registration]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * Models the User Delete Registration Event (and can be converted to JSON).
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserRegistrationDeleteEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    UserRegistration} [registration]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * Models the User Update Registration Event (and can be converted to JSON).
 *
 * @author Daniel DeGroff
 *
 * @typedef {Object} UserRegistrationUpdateEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    UserRegistration} [original]
 * @property {    UserRegistration} [registration]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * Models the User Registration Verified Event (and can be converted to JSON).
 *
 * @author Trevor Smith
 *
 * @typedef {Object} UserRegistrationVerifiedEvent
 * @extends     BaseEvent
 *
 * @property {    string} [applicationId]
 * @property {    UserRegistration} [registration]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * User API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserRequest
 *
 * @property {    boolean} [sendSetPasswordEmail]
 * @property {    boolean} [skipVerification]
 * @property {    User} [user]
 */


/**
 * User API response object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserResponse
 *
 * @property {    User} [user]
 */


/**
 * This class is the user query. It provides a build pattern as well as public fields for use on forms and in actions.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserSearchCriteria
 * @extends     BaseSearchCriteria
 *
 * @property {    string} [email]
 * @property {    string} [fullName]
 * @property {    string} [id]
 * @property {    Array
<    string>} [ids]
 * @property {    string} [queryString]
 * @property {    Array
<    SortField>} [sortFields]
 * @property {    string} [username]
 */


/**
 * @author Daniel DeGroff
 *
 * @readonly
 * @enum
 */
var UserState = {
  Authenticated: "Authenticated",
  AuthenticatedNotRegistered: "AuthenticatedNotRegistered"
};

/**
 * Models the User Update Event (and can be converted to JSON).
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} UserUpdateEvent
 * @extends     BaseEvent
 *
 * @property {    User} [original]
 * @property {    EventType} [type]
 * @property {    User} [user]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} ValidateResponse
 *
 * @property {    Object} [jwt]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} VerifyEmailResponse
 *
 * @property {    string} [verificationId]
 */


/**
 * @author Daniel DeGroff
 *
 * @typedef {Object} VerifyRegistrationResponse
 *
 * @property {    string} [verificationId]
 */


/**
 * A server where events are sent. This includes user action events and any other events sent by FusionAuth.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} Webhook
 *
 * @property {    Array
<    string>} [applicationIds]
 * @property {    number} [connectTimeout]
 * @property {    WebhookData} [data]
 * @property {    string} [description]
 * @property {    boolean} [global]
 * @property {    HTTPHeaders} [headers]
 * @property {    string} [httpAuthenticationPassword]
 * @property {    string} [httpAuthenticationUsername]
 * @property {    string} [id]
 * @property {    number} [readTimeout]
 * @property {    string} [sslCertificate]
 * @property {    string} [url]
 */


/**
 * @typedef {Object} WebhookData
 *
 * @property {    Object
<    EventType,     boolean>} [eventsEnabled]
 */


/**
 * Webhook API request object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} WebhookRequest
 *
 * @property {    Webhook} [webhook]
 */


/**
 * Webhook API response object.
 *
 * @author Brian Pontarelli
 *
 * @typedef {Object} WebhookResponse
 *
 * @property {    Webhook} [webhook]
 * @property {    Array
<    Webhook>} [webhooks]
 */


